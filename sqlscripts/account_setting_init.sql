CREATE TABLE ACCOUNT_SETTING
( ID INTEGER PRIMARY KEY
, ACCOUNTID INTEGER
, RECALCID INTEGER
, MULTIPLIERID INTEGER
, HEIGHT NUMBER(5,1)
, DATE_CHANGED DATE
, CONSTRAINT FK_ACCOUNTID FOREIGN KEY(ACCOUNTID) REFERENCES ACCOUNT(ID)
, CONSTRAINT FK_RECALCID FOREIGN KEY(RECALCID) REFERENCES RECALC(ID)
, CONSTRAINT FK_MULTIPLIERID FOREIGN KEY(MULTIPLIERID) REFERENCES MULTIPLIER(ID)
);


----------------------------------
-- VIEW FOR LATEST ACCOUNT_SETTING
CREATE OR REPLACE VIEW ACCOUNT_SETTING_VIEW AS
  SELECT ROWNUM ID, ACT.ACCOUNTID ACCOUNTID, RECALCID, MULTIPLIERID, HEIGHT, ACT.DATE_CHANGED
  FROM ACCOUNT_SETTING ACT
  JOIN (SELECT ACCOUNTID, MAX(DATE_CHANGED) DATE_CHANGED
        FROM ACCOUNT_SETTING
        GROUP BY ACCOUNTID) ACT_I
  ON ACT.ACCOUNTID = ACT_I.ACCOUNTID and ACT.DATE_CHANGED = ACT_I.DATE_CHANGED;

CREATE SEQUENCE SEQ_ACCOUNT_SETTINGID
START WITH 0
MINVALUE 0
INCREMENT BY 1
CACHE 20
NOCYCLE;

-------------------------------------------------------------------------------
-- ACCOUNT_SETTING PROCEDURES
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE ACCOUNT_SETTING_INIT(PACCTID IN ACCOUNT_SETTING.ACCOUNTID%TYPE)
IS
BEGIN
  INSERT INTO ACCOUNT_SETTING(ID, ACCOUNTID, RECALCID, MULTIPLIERID, HEIGHT, DATE_CHANGED)
  VALUES(SEQ_ACCOUNT_SETTINGID.NEXTVAL, PACCTID, 1, 1, 0, SYSDATE);
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/


CREATE OR REPLACE PROCEDURE ACCOUNT_SETTING_INSERT
( PACCTID IN ACCOUNT_SETTING.ACCOUNTID%TYPE
, PRECALCID IN ACCOUNT_SETTING.RECALCID%TYPE
, PMULTID IN ACCOUNT_SETTING.MULTIPLIERID%TYPE
, PHEIGHT IN ACCOUNT_SETTING.HEIGHT%TYPE
)
IS
  ICHANGED DATE;
BEGIN
  SELECT DATE_CHANGED INTO ICHANGED FROM ACCOUNT_SETTING_VIEW WHERE ACCOUNTID=PACCTID;
  IF ROUND(ICHANGED, 'DDD') = ROUND(SYSDATE, 'DDD') THEN
    UPDATE ACCOUNT_SETTING
    SET RECALCID=PRECALCID,
        MULTIPLIERID=PMULTID,
        HEIGHT=PHEIGHT
    WHERE ACCOUNTID=PACCTID AND DATE_CHANGED=ICHANGED;
  ELSE
    INSERT INTO ACCOUNT_SETTING(ID, ACCOUNTID, RECALCID, MULTIPLIERID, HEIGHT, DATE_CHANGED)
    VALUES(SEQ_ACCOUNT_SETTINGID.NEXTVAL, PACCTID, PRECALCID, PMULTID, PHEIGHT, SYSDATE);
  END IF;
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

CREATE OR REPLACE PROCEDURE ACCOUNT_SETTING_VIEW_GET_BYID
( PID IN ACCOUNT_SETTING.ACCOUNTID%TYPE
, PCURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM ACCOUNT_SETTING_VIEW WHERE ACCOUNTID=PID;
END;
/

CREATE OR REPLACE PROCEDURE ACCOUNT_SETTING_VIEW_GETALL(PCURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT *
    FROM ACCOUNT_SETTING_VIEW;
END;
/