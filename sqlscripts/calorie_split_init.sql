CREATE TABLE CALORIE_SPLIT
( ID INTEGER
, NAME VARCHAR2(40)
, WORKOUT_MULTIPLIER DECIMAL(3,2)
, REST_MULTIPLIER DECIMAL(3,2)
, CONSTRAINT PK_CALORIE_SPLIT_ID PRIMARY KEY(ID)
);

CREATE SEQUENCE SEQ_CALORIE_SPLITID
START WITH 0
MINVALUE 0
INCREMENT BY 1
CACHE 20
NOCYCLE;

CREATE OR REPLACE PACKAGE CALORIE_SPLIT_PKG AS
  -- Function for generating an abbreviation for a calorie split.
  -- It returns a string of '(+x, -y)'
  FUNCTION FORABBR(PDEC IN DECIMAL, PDEC2 IN DECIMAL) RETURN VARCHAR2 DETERMINISTIC;
  
  -- Returns a single calorie split by id
  PROCEDURE GET(PID IN CALORIE_SPLIT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns all the calorie splits
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Creates a new Calorie Split
  PROCEDURE NEW( PNAME IN CALORIE_SPLIT.NAME%TYPE
               , PWORKOUT IN CALORIE_SPLIT.WORKOUT_MULTIPLIER%TYPE
               , PREST IN CALORIE_SPLIT.REST_MULTIPLIER%TYPE
               , PID IN CALORIE_SPLIT.ID%TYPE DEFAULT SEQ_CALORIE_SPLITID.NEXTVAL
               );

END CALORIE_SPLIT_PKG;
/

CREATE OR REPLACE PACKAGE BODY CALORIE_SPLIT_PKG AS
  FUNCTION FORABBR(PDEC IN DECIMAL, PDEC2 IN DECIMAL) RETURN VARCHAR2 DETERMINISTIC
  IS
    IDEC INTEGER;
    IDEC2 INTEGER;
    ISTR VARCHAR(20);
  BEGIN
    IDEC := ROUND(100-100*PDEC)*-1;
    IDEC2 := ROUND(100-100*PDEC2)*-1;
    ISTR := '(';
    IF IDEC > 0 THEN
      ISTR := ISTR||'+'||TO_CHAR(IDEC);
    ELSE
      ISTR := ISTR||TO_CHAR(IDEC);
    END IF;
    ISTR := ISTR||', ';
    IF IDEC2 > 0 THEN
      ISTR := ISTR||'+'||TO_CHAR(IDEC2);
    ELSE
      ISTR := ISTR||TO_CHAR(IDEC2);
    END IF;
    RETURN ISTR||')';
  END FORABBR;

  PROCEDURE GET(PID IN CALORIE_SPLIT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM CALORIE_SPLIT
      WHERE ID=PID;
  END GET;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM CALORIE_SPLIT;
  END GET;
  
  PROCEDURE NEW( PNAME IN CALORIE_SPLIT.NAME%TYPE
               , PWORKOUT IN CALORIE_SPLIT.WORKOUT_MULTIPLIER%TYPE
               , PREST IN CALORIE_SPLIT.REST_MULTIPLIER%TYPE
               , PID IN CALORIE_SPLIT.ID%TYPE DEFAULT SEQ_CALORIE_SPLITID.NEXTVAL
               )
  IS
  BEGIN
    INSERT INTO CALORIE_SPLIT(ID,NAME,WORKOUT_MULTIPLIER,REST_MULTIPLIER)
    VALUES(PID,UPPER(PNAME),PWORKOUT,PREST);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
END CALORIE_SPLIT_PKG;
/

-- I don't understand this. even with substring from 1-10, the size of the string is 40
ALTER TABLE CALORIE_SPLIT
ADD (ABBREVIATION VARCHAR2(40) GENERATED ALWAYS AS 
    (SUBSTR(CALORIE_SPLIT_PKG.FORABBR(WORKOUT_MULTIPLIER, REST_MULTIPLIER),1,10)));


-------------------------------------------------------------------------------
-- Initial Data
----------------
