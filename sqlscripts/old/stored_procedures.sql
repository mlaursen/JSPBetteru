-------------------------------------------------------------------------------
-- NON_TABLE_SPECIFIC
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE RESET_SEQ( PNAME IN VARCHAR2 )
IS
  L_CURR NUMBER;
  L_TOT   NUMBER;
  L_SUB NUMBER;
  L_NEG VARCHAR2(1);
BEGIN
  EXECUTE IMMEDIATE 'SELECT SEQ_' || PNAME || 'ID.NEXTVAL FROM DUAL' INTO L_CURR;
  EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM ' || PNAME || '' INTO L_TOT;
  IF L_CURR >= L_TOT THEN
    L_NEG := '-';
    L_SUB := L_CURR - L_TOT;
  ELSE
    L_NEG := '';
    L_SUB := L_TOT - L_CURR;
  END IF;
  EXECUTE IMMEDIATE 'ALTER SEQUENCE SEQ_' || PNAME || 'ID INCREMENT BY ' || L_NEG || L_SUB || ' MINVALUE 0';
  EXECUTE IMMEDIATE 'SELECT SEQ_' || PNAME || 'ID.NEXTVAL FROM DUAL' INTO L_CURR;
  EXECUTE IMMEDIATE 'ALTER SEQUENCE SEQ_' || PNAME || 'ID INCREMENT BY 1 MINVALUE 0';
  COMMIT;
END;
/



-------------------------------------------------------------------------------
-- ACCOUNT
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE ACCOUNT_GETALL_BYID
( PID IN ACCOUNTS_ACCOUNT.ID%TYPE
, PCURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM ACCOUNTS_ACCOUNT WHERE ID=PID;
END;
/

CREATE OR REPLACE PROCEDURE ACCOUNT_GETPASSWORD_BYID
( PUSERNAME IN ACCOUNTS_ACCOUNT.USERNAME%TYPE
, PCURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT PASSWORD FROM ACCOUNTS_ACCOUNT WHERE USERNAME=PUSERNAME;
END;
/


CREATE OR REPLACE PROCEDURE ACCOUNT_INSERT
( PUSERNAME IN ACCOUNTS_ACCOUNT.USERNAME%TYPE
, PPASSWORD IN ACCOUNTS_ACCOUNT.PASSWORD%TYPE
)
IS
BEGIN
  INSERT INTO ACCOUNTS_ACCOUNT(ID, USERNAME, PASSWORD, ACTIVE_SINCE)
  VALUES(SEQ_ACCOUNTID.NEXTVAL, PUSERNAME, PPASSWORD, SYSDATE);
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

CREATE OR REPLACE PROCEDURE ACCOUNT_UPDATE_BYID
( PID IN ACCOUNTS_ACCOUNT.ID%TYPE
, PBIRTHDAY IN VARCHAR2
, PGENDER   IN ACCOUNTS_ACCOUNT.GENDER%TYPE
, PUNIT    IN ACCOUNTS_ACCOUNT.UNIT%TYPE
)
IS
BEGIN
  UPDATE ACCOUNTS_ACCOUNT
  SET BIRTHDAY=TO_DATE(PBIRTHDAY, 'mm/dd/yyyy'),
      GENDER=PGENDER,
      UNIT=PUNIT
  WHERE ID=PID;
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

CREATE OR REPLACE PROCEDURE ACCOUNT_GETID_BYUSERNAME
( PUSERNAME IN ACCOUNTS_ACCOUNT.USERNAME%TYPE
, PID OUT SYS_REFCURSOR
)
IS
BEGIN
  OPEN PID FOR
    SELECT ID FROM ACCOUNTS_ACCOUNT WHERE USERNAME=PUSERNAME;
END;
/

CREATE OR REPLACE PROCEDURE ACCOUNT_UPDATELOGIN
( PID IN ACCOUNTS_ACCOUNT.ID%TYPE )
IS
BEGIN
  UPDATE ACCOUNTS_ACCOUNT
  SET LAST_LOGIN=SYSDATE
  WHERE ID=PID;
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/



-------------------------------------------------------------------------------
-- Begin TempAccount procedures
-------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE TEMPACCOUNT_INSERT
( PUSERNAME IN ACCOUNTS_TEMPACCOUNT.USERNAME%TYPE
, PPASSWORD IN ACCOUNTS_TEMPACCOUNT.PASSWORD%TYPE
, PCODE     IN ACCOUNTS_TEMPACCOUNT.CODE%TYPE
)
IS
BEGIN
  INSERT INTO ACCOUNTS_TEMPACCOUNT(ID, USERNAME, PASSWORD, CODE, CREATED)
  VALUES(SEQ_TEMPACCOUNTID.NEXTVAL, PUSERNAME, PPASSWORD, PCODE, SYSDATE);
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

CREATE OR REPLACE PROCEDURE TEMPACCOUNT_GETBYID
( PID IN ACCOUNTS_TEMPACCOUNT.ID%TYPE
, PCURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT ID, USERNAME, PASSWORD, CODE FROM ACCOUNTS_TEMPACCOUNT WHERE ID=PID;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

CREATE OR REPLACE PROCEDURE TEMPACCOUNT_DELETEBYID
( PID IN ACCOUNTS_TEMPACCOUNT.ID%TYPE )
IS
BEGIN
  DELETE FROM ACCOUNTS_TEMPACCOUNT
  WHERE ID=PID;
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

-------------------------------------------------------------------------------
-- Begin AccountSettings Procedures
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE ACCOUNTSETTINGS_INSERT
( PAID IN ACCOUNTS_ACCOUNT.ID%TYPE
, PRECALC IN ACCOUNTS_ACCOUNTSETTINGS.RECALC_DAY%TYPE
, PMULT IN ACCOUNTS_ACCOUNTSETTINGS.MULTIPLIER%TYPE
, PHEIGHT IN ACCOUNTS_ACCOUNTSETTINGS.HEIGHT%TYPE
, PDCHANGED IN ACCOUNTS_ACCOUNTSETTINGS.DATE_CHANGED%TYPE DEFAULT SYSDATE
)
IS
BEGIN
  INSERT INTO ACCOUNTS_ACCOUNTSETTINGS(ID, ACCOUNTID, RECALC_DAY, MULTIPLIER, HEIGHT, DATE_CHANGED)
  VALUES(SEQ_ACCOUNTSETTINGSID.NEXTVAL, PAID, PRECALC, PMULT, PHEIGHT, PDCHANGED);
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

CREATE OR REPLACE PROCEDURE ACCOUNTSETTINGS_GET_BYAID
( PAID IN ACCOUNTS_ACCOUNT.ID%TYPE
, PCUSROR OUT SYS_REFCURSOR
)
IS
  IROWS NUMBER;
BEGIN
  SELECT COUNT(*) INTO IROWS FROM ACCOUNTS_ACCOUNTSETTINGS WHERE ACCOUNTID=PAID;
  IF IROWS = 0 THEN
    INSERT INTO ACCOUNTS_ACCOUNTSETTINGS(ID, ACCOUNTID)
    VALUES(SEQ_ACCOUNTSETTINGSID.NEXTVAL, PAID);
    COMMIT;
  END IF;
  OPEN PCUSROR FOR
    SELECT * FROM ACCOUNTS_ACCOUNTSETTINGS WHERE ACCOUNTID=PAID;
END;
/


CREATE OR REPLACE PROCEDURE ACCOUNTSETTINGS_INSERTUPDATE
( PAID IN ACCOUNTS_ACCOUNT.ID%TYPE
, PRECALC IN ACCOUNTS_ACCOUNTSETTINGS.RECALC_DAY%TYPE
, PMULT IN ACCOUNTS_ACCOUNTSETTINGS.MULTIPLIER%TYPE
, PHEIGHT IN ACCOUNTS_ACCOUNTSETTINGS.HEIGHT%TYPE
, PDCHANGED IN ACCOUNTS_ACCOUNTSETTINGS.DATE_CHANGED%TYPE DEFAULT SYSDATE
)
IS
  IROWS NUMBER;
BEGIN
  SELECT COUNT(*) INTO IROWS FROM ACCOUNT_SETTINGS_VIEW WHERE ACCOUNTID=PAID;
  
  IF IROWS > 0 THEN
    ACCOUNTSETTINGS_UPDATE(PAID, PRECALC, PMULT, PHEIGHT);
  ELSE
    ACCOUNTSETTINGS_INSERT(PAID, PRECALC, PMULT, PHEIGHT);
  END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/


CREATE OR REPLACE PROCEDURE ACCOUNTSETTINGS_UPDATE
( PAID IN ACCOUNTS_ACCOUNT.ID%TYPE
, PRECALC IN ACCOUNTS_ACCOUNTSETTINGS.RECALC_DAY%TYPE
, PMULT IN ACCOUNTS_ACCOUNTSETTINGS.MULTIPLIER%TYPE
, PHEIGHT IN ACCOUNTS_ACCOUNTSETTINGS.HEIGHT%TYPE
)
IS
BEGIN
  UPDATE ACCOUNTS_ACCOUNTSETTINGS
  SET ACCOUNTID=PAID,
      RECALC_DAY=PRECALC,
      MULTIPLIER=PMULT,
      HEIGHT=PHEIGHT
  WHERE ACCOUNTID=PAID;
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/


-------------------------------------------------------------------------------
-- ACCOUNT_SETTINGS_VIEW
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE ACCOUNTSETTINGS_VIEW_GET_BYAID
( PAID IN ACCOUNTS_ACCOUNT.ID%TYPE
, PCURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM ACCOUNT_SETTINGS_VIEW WHERE ACCOUNTID=PAID;
END;
/

-------------------------------------------------------------------------------
-- ACCOUNT_VIEW
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE ACCOUNT_VIEW_GET_BYID
( PID IN ACCOUNTS_ACCOUNT.ID%TYPE
, PCURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM ACCOUNT_VIEW WHERE ID=PID;
END;
/


-------------------------------------------------------------------------------
-- BRANDS
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE BRAND_GETALL(PCURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT *
    FROM BRAND
    ORDER BY NAME;
END;
/

CREATE OR REPLACE PROCEDURE BRAND_GETNAME_BYID
( PID IN BRAND.ID%TYPE
, PCURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
  OPEN PCURSOR FOR 
    SELECT NAME FROM BRAND WHERE ID=PID;
END;
/

CREATE OR REPLACE PROCEDURE BRAND_INSERT
( PNAME BRAND.NAME%TYPE
)
IS
BEGIN
  INSERT INTO BRAND(ID, NAME)
  VALUES(SEQ_BRANDID.NEXTVAL, PNAME);
  COMMIT;
  
  EXCEPTION
   WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
END;
/


-------------------------------------------------------------------------------
-- CATEGORY
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE CATEGORY_GETALL(PCURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT *
    FROM CATEGORY
    ORDER BY ID;
END;
/

CREATE OR REPLACE PROCEDURE CATEGORY_GETNAME_BYID
( PID IN CATEGORY.ID%TYPE
, PCURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT NAME FROM CATEGORY WHERE ID=PID;
END;
/

CREATE OR REPLACE PROCEDURE CATEGORY_INSERT
( PNAME IN CATEGORY.NAME%TYPE
)
IS
BEGIN
  INSERT INTO CATEGORY(ID, NAME)
  VALUES(SEQ_CATEGORYID.NEXTVAL, PNAME);
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

-------------------------------------------------------------------------------
-- UNIT
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE UNIT_GETALL(PCURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM UNIT;
END;
/

CREATE OR REPLACE PROCEDURE UNIT_GET_BYID(PID IN UNIT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM UNIT WHERE ID=PID;
END;
/

CREATE OR REPLACE PROCEDURE UNIT_GET_BYNAME(PNAME IN UNIT.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM UNIT WHERE NAME=PNAME;
END;
/

CREATE OR REPLACE PROCEDURE UNIT_INSERT
( PNAME IN UNIT.NAME%TYPE
, PSHORTNAME IN UNIT.SHORT_NAME%TYPE
)
IS
BEGIN
  INSERT INTO UNIT(ID, NAME, SHORT_NAME)
  VALUES(SEQ_UNITID.NEXTVAL, PNAME, PSHORTNAME);
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

-------------------------------------------------------------------------------
-- INGREDIENT
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE INGREDIENT_INSERT
( PNAME IN INGREDIENT.NAME%TYPE
, PBRAND IN INGREDIENT.BRANDID%TYPE
, PCATG IN INGREDIENT.CATEGORYID%TYPE
, PSERV_UNIT IN INGREDIENT.SERVING_UNIT%TYPE
, PSERV_SIZE IN INGREDIENT.SERVING_SIZE%TYPE
, PALT_SERV_UNIT IN INGREDIENT.ALT_SERVING_UNIT%TYPE
, PALT_SERV_SIZE IN INGREDIENT.ALT_SERVING_SIZE%TYPE
, PCAL IN INGREDIENT.CALORIES%TYPE
, PFAT IN INGREDIENT.FAT%TYPE
, PCARB IN INGREDIENT.CARBS%TYPE
, PPROT IN INGREDIENT.PROTEIN%TYPE
)
IS
BEGIN
  INSERT INTO INGREDIENT(ID, NAME, BRANDID, CATEGORYID, SERVING_UNIT, SERVING_SIZE, ALT_SERVING_UNIT, ALT_SERVING_SIZE, CALORIES, FAT, CARBS, PROTEIN)
  VALUES(SEQ_INGREDIENTID.NEXTVAL, PNAME, PBRAND, PCATG, PSERV_UNIT, PSERV_SIZE, PALT_SERV_UNIT, PALT_SERV_SIZE, PCAL, PFAT, PCARB, PPROT);
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

CREATE OR REPLACE PROCEDURE INGREDIENT_INSERT_NONID
( PNAME IN INGREDIENT.NAME%TYPE
, PBRAND IN BRAND.NAME%TYPE
, PCATG IN CATEGORY.NAME%TYPE
, PSERV_UNIT IN UNIT.NAME%TYPE
, PSERV_SIZE IN INGREDIENT.SERVING_SIZE%TYPE
, PALT_SERV_UNIT IN UNIT.NAME%TYPE
, PALT_SERV_SIZE IN INGREDIENT.ALT_SERVING_SIZE%TYPE
, PCAL IN INGREDIENT.CALORIES%TYPE
, PFAT IN INGREDIENT.FAT%TYPE
, PCARB IN INGREDIENT.CARBS%TYPE
, PPROT IN INGREDIENT.PROTEIN%TYPE
)
IS
  IBID INTEGER;
  ICID INTEGER;
  ISERV INTEGER;
  ISERV2 INTEGER;
BEGIN
  SELECT ID INTO IBID FROM BRAND WHERE NAME=PBRAND;
  SELECT ID INTO ICID FROM CATEGORY WHERE NAME=PCATG;
  SELECT ID INTO ISERV FROM UNIT WHERE NAME=PSERV_UNIT;
  SELECT ID INTO ISERV2 FROM UNIT WHERE NAME=PALT_SERV_UNIT;
  INGREDIENT_INSERT(PNAME, IBID, ICID, ISERV, PSERV_SIZE, ISERV2, PALT_SERV_SIZE, PCAL, PFAT, PCARB, PPROT);
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

-------------------------------------------------------------------------------
-- INGREDIENT_VIEW
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE INGREDIENT_VIEW_GETALL(PCURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM INGREDIENT_VIEW;
END;
/

CREATE OR REPLACE PROCEDURE INGREDIENT_VIEW_FILTERBY
( PCATEGORY IN VARCHAR2
, PBRAND IN VARCHAR2
, PCURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
  IF UPPER(PCATEGORY) != 'ALL' AND UPPER(PBRAND) != 'ALL' THEN
    OPEN PCURSOR FOR
      SELECT * FROM INGREDIENT_VIEW WHERE UPPER(CATEGORY_NAME)=UPPER(PCATEGORY) AND UPPER(BRAND_NAME)=UPPER(PBRAND);
  ELSIF UPPER(PCATEGORY) != 'ALL' THEN
    OPEN PCURSOR FOR
      SELECT * FROM INGREDIENT_VIEW WHERE UPPER(CATEGORY_NAME)=UPPER(PCATEGORY);
  ELSIF UPPER(PBRAND) != 'ALL' THEN
    OPEN PCURSOR FOR
      SELECT * FROM INGREDIENT_VIEW WHERE UPPER(BRAND_NAME)=UPPER(PBRAND);
  ELSE
    OPEN PCURSOR FOR
      SELECT * FROM INGREDIENT_VIEW;
  END IF;
END;
/


COMMIT;