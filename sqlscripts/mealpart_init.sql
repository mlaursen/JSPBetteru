CREATE TABLE MEAL_PART
( ID INTEGER NOT NULL
, MEALID INTEGER
, INGREDIENTID INTEGER
, AMOUNT NUMBER(6,2)
, DEFAULT_UNIT CHAR(1)
, CONSTRAINT PK_MEAL_PART_ID PRIMARY KEY (ID)
, CONSTRAINT FK_MEAL_PART_MEALID FOREIGN KEY(MEALID) REFERENCES MEAL(ID)
, CONSTRAINT FK_MEAL_PART_INGREDIENTID FOREIGN KEY(INGREDIENTID) REFERENCES INGREDIENT(ID)
, CONSTRAINT CK_DEFAULT_UNIT_FLAG CHECK(DEFAULT_UNIT BETWEEN 0 AND 1)
);


CREATE SEQUENCE SEQ_MEAL_PART_ID
START WITH 0
MINVALUE 0
INCREMENT BY 1
CACHE 20
NOCYCLE;




-------------------------------------
-- MEALPART VIEW
-------------------------------------
CREATE OR REPLACE VIEW MEAL_PART_VIEW AS
  SELECT ID, MEALID, AMOUNT, INGREDIENT, BRAND, CATEGORY, SERVING_SIZE, SERVING_UNIT, (CALORIES*RATIO) TOTAL_CALORIES, (FAT*RATIO) TOTAL_FAT, (CARBS*RATIO) TOTAL_CARBS, (PROTEIN*RATIO) TOTAL_PROTEIN
  FROM (SELECT ROWNUM ID, MEALID, AMOUNT, DEFAULT_UNIT, I.NAME INGREDIENT, BRAND, CATEGORY, CALORIES, FAT, CARBS, PROTEIN, AMOUNT / DECODE(DEFAULT_UNIT, 0, SERVING_SIZE, ALT_SERVING_SIZE) RATIO,
               DECODE(DEFAULT_UNIT, 0, SERVING_SIZE, ALT_SERVING_SIZE) SERVING_SIZE,
               DECODE(DEFAULT_UNIT, 0, SERVING_UNIT, ALT_SERVING_UNIT) SERVING_UNIT
        FROM MEAL_PART MP INNER JOIN INGREDIENT i ON MP.INGREDIENTID = I.ID)
  ORDER BY ID
WITH READ ONLY;
-------------------------------------------------------------------------------
-- MEALPART PROCEDURES
-------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE MEAL_PART_PKG AS
  -- Creates a new Meal Part
  PROCEDURE NEW( PMEALID IN MEAL_PART.MEALID%TYPE
               , PINGID  IN MEAL_PART.INGREDIENTID%TYPE
               , PAMOUNT IN MEAL_PART.AMOUNT%TYPE
               , PDEFAULT_UNIT IN MEAL_PART.DEFAULT_UNIT%TYPE
               , PID IN MEAL_PART.ID%TYPE DEFAULT SEQ_MEAL_PART_ID.NEXTVAL
               );
               
  -- Returns all meal parts
  PROCEDURE GET( PCURSOR OUT SYS_REFCURSOR );
  
  -- Returns a SYS_REFCURSOR for all meal parts for a given meal id
  PROCEDURE GET( PID IN MEAL_PART.MEALID%TYPE, PCURSOR OUT SYS_REFCURSOR);
END MEAL_PART_PKG;
/

CREATE OR REPLACE PACKAGE BODY MEAL_PART_PKG AS
  PROCEDURE NEW( PMEALID IN MEAL_PART.MEALID%TYPE
               , PINGID  IN MEAL_PART.INGREDIENTID%TYPE
               , PAMOUNT IN MEAL_PART.AMOUNT%TYPE
               , PDEFAULT_UNIT IN MEAL_PART.DEFAULT_UNIT%TYPE
               , PID IN MEAL_PART.ID%TYPE DEFAULT SEQ_MEAL_PART_ID.NEXTVAL
               )
  IS
  BEGIN
    INSERT INTO MEAL_PART(ID, MEALID, INGREDIENTID, AMOUNT, DEFAULT_UNIT)
    VALUES(PID, PMEALID, PINGID, PAMOUNT, PDEFAULT_UNIT);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET( PCURSOR OUT SYS_REFCURSOR )
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM MEAL_PART_VIEW
      ORDER BY ID;
  END GET;
  
  PROCEDURE GET( PID IN MEAL_PART.MEALID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM MEAL_PART_VIEW
      WHERE MEALID=PID;
  END GET;
  
END MEAL_PART_PKG;
/

------------------------------------------------------
-- initial
-----------------
EXEC MEAL_PART_PKG.NEW(0, 8, 300, 1);

EXEC MEAL_PART_PKG.NEW(1, 10, 1, 0);
EXEC MEAL_PART_PKG.NEW(1, 11, 8, 0);
EXEC MEAL_PART_PKG.NEW(1, 13, 227, 0);