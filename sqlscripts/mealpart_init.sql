CREATE TABLE MEALPART
( ID INTEGER PRIMARY KEY
, MEALID INTEGER
, INGREDIENTID INTEGER
, AMOUNT NUMBER(6,2)
, DEFAULT_UNIT CHAR(1)
, CONSTRAINT FK_MEALID FOREIGN KEY(MEALID) REFERENCES MEAL(ID)
, CONSTRAINT FK_INGREDIENTID FOREIGN KEY(INGREDIENTID) REFERENCES INGREDIENT(ID)
);


CREATE SEQUENCE SEQ_MEALPARTID
START WITH 0
MINVALUE 0
INCREMENT BY 1
CACHE 20
NOCYCLE;


-------------------------------------
-- MEALPART VIEW
-------------------------------------
CREATE OR REPLACE VIEW MEALPART_VIEW AS
  SELECT ID, MEALID, AMOUNT, INGREDIENT_NAME, BRAND_NAME, CATEGORY_NAME, CALORIES, FAT, CARBS, PROTEIN,
        (CALORIES*RATIO) TOTAL_CALORIES, (FAT*RATIO) TOTAL_FAT, (CARBS*RATIO) TOTAL_CARBS, (PROTEIN*RATIO) TOTAL_PROTEIN,
        SERVING_SIZE, SERVING_UNIT, DEFAULT_SERVING_SIZE, DEFAULT_SERVING_UNIT, ALT_SERVING_SIZE, ALT_SERVING_UNIT
FROM (SELECT ROWNUM ID, MEALID, MP.AMOUNT AMOUNT, DEFAULT_UNIT, INGREDIENT_NAME, BRAND_NAME, CATEGORY_NAME, CALORIES, FAT, CARBS, PROTEIN, SERVING_SIZE DEFAULT_SERVING_SIZE, SERVING_UNIT DEFAULT_SERVING_UNIT,
               ALT_SERVING_SIZE, ALT_SERVING_UNIT,
               CASE WHEN DEFAULT_UNIT = 0 THEN (AMOUNT / SERVING_SIZE)
                    ELSE (AMOUNT / ALT_SERVING_SIZE)
                    END AS RATIO,
               CASE WHEN DEFAULT_UNIT = 0 THEN SERVING_SIZE 
                    ELSE ALT_SERVING_SIZE
                    END AS SERVING_SIZE,
               CASE WHEN DEFAULT_UNIT = 0 THEN SERVING_UNIT
                    ELSE ALT_SERVING_UNIT
                    END AS SERVING_UNIT
        FROM MEALPART MP
        JOIN INGREDIENT_VIEW IV
        ON MP.INGREDIENTID = IV.ID)
  ORDER BY ID;

-------------------------------------------------------------------------------
-- MEALPART PROCEDURES
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE MEALPART_INSERT
( PMEALID IN MEALPART.MEALID%TYPE
, PINGID IN MEALPART.INGREDIENTID%TYPE
, PAMOUNT IN MEALPART.AMOUNT%TYPE
, PUNIT IN MEALPART.DEFAULT_UNIT%TYPE
)
IS
BEGIN
  INSERT INTO MEALPART(ID, MEALID, INGREDIENTID, AMOUNT, DEFAULT_UNIT)
  VALUES(SEQ_MEALPARTID.NEXTVAL, PMEALID, PINGID, PAMOUNT, PUNIT);
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/


CREATE OR REPLACE PROCEDURE MEALPART_GET_BYID
( PID IN MEALPART.ID%TYPE
, PCURSOR OUT SYS_REFCURSOR
)
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM MEALPART WHERE ID=PID;
END;
/

CREATE OR REPLACE PROCEDURE MEALPART_GETALL(PCURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN PCURSOR FOR 
    SELECT * FROM MEALPART;
END;
/

CREATE OR REPLACE PROCEDURE MEALPART_VIEW_GETALL( PCURSOR OUT SYS_REFCURSOR )
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM MEALPART_VIEW;
END;
/

CREATE OR REPLACE PROCEDURE MEALPART_VIEW_GET_BYID( PID IN INTEGER, PCURSOR OUT SYS_REFCURSOR )
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM MEALPART_VIEW WHERE ID=PID;
END;
/

CREATE OR REPLACE PROCEDURE MEALPART_VIEW_GETALL_ID( PMEALID IN INTEGER, PCURSOR OUT SYS_REFCURSOR )
IS
BEGIN
  OPEN PCURSOR FOR
    SELECT * FROM MEALPART_VIEW WHERE MEALID=PMEALID;
END;
/
