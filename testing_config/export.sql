--------------------------------------------------------
--  File created - Thursday-February-27-2014   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence SEQ_ACCOUNTID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ACCOUNTID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 40 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_ACCOUNT_SETTINGID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ACCOUNT_SETTINGID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 40 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_BRANDID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_BRANDID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 0 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_CALORIE_SPLITID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_CALORIE_SPLITID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 0 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_CATEGORYID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_CATEGORYID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 0 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_GENDERID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_GENDERID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 0 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_INGREDIENTID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_INGREDIENTID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 40 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_INTAKE_ID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_INTAKE_ID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 20 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_MEALID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_MEALID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 20 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_MEALPARTID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_MEALPARTID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 0 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_MEAL_PART_ID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_MEAL_PART_ID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 20 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Sequence SEQ_TEMP_ACCOUNTID
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_TEMP_ACCOUNTID"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 40 CACHE 20 NOORDER  NOCYCLE ;
/
--------------------------------------------------------
--  DDL for Table ACCOUNT
--------------------------------------------------------

  CREATE TABLE "ACCOUNT" 
   (	"ID" NUMBER(*,0), 
	"USERNAME" VARCHAR2(60 BYTE), 
	"PASSWORD" CHAR(128 BYTE), 
	"BIRTHDAY" DATE, 
	"UNIT" VARCHAR2(8 BYTE), 
	"GENDER" VARCHAR2(7 BYTE), 
	"LAST_LOGIN" DATE, 
	"ACTIVE_SINCE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table ACCOUNT_SETTING
--------------------------------------------------------

  CREATE TABLE "ACCOUNT_SETTING" 
   (	"ID" NUMBER(*,0), 
	"ACCOUNTID" NUMBER(*,0), 
	"WEEKDAY" VARCHAR2(22 BYTE), 
	"MULTIPLIER" VARCHAR2(30 BYTE), 
	"HEIGHT" NUMBER(5,1), 
	"DATE_CHANGED" DATE, 
	"FORMULA" VARCHAR2(20 BYTE) DEFAULT 'MIFFLIN-ST JOER'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table BRAND
--------------------------------------------------------

  CREATE TABLE "BRAND" 
   (	"NAME" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table CALORIE_SPLIT
--------------------------------------------------------

  CREATE TABLE "CALORIE_SPLIT" 
   (	"ID" NUMBER(*,0), 
	"NAME" VARCHAR2(40 BYTE), 
	"WORKOUT_MULTIPLIER" NUMBER(3,2), 
	"REST_MULTIPLIER" NUMBER(3,2), 
	"ABBREVIATION" VARCHAR2(40 BYTE) GENERATED ALWAYS AS (SUBSTR("CALORIE_SPLIT_PKG"."FORABBR"("WORKOUT_MULTIPLIER","REST_MULTIPLIER"),1,10)) VIRTUAL VISIBLE 
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table CATEGORY
--------------------------------------------------------

  CREATE TABLE "CATEGORY" 
   (	"NAME" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table FOOD_UNIT
--------------------------------------------------------

  CREATE TABLE "FOOD_UNIT" 
   (	"NAME" VARCHAR2(8 BYTE), 
	"LONG_NAME" VARCHAR2(15 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table FORMULA
--------------------------------------------------------

  CREATE TABLE "FORMULA" 
   (	"NAME" VARCHAR2(25 BYTE), 
	"UNIT_SYSTEM" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table GENDER
--------------------------------------------------------

  CREATE TABLE "GENDER" 
   (	"NAME" VARCHAR2(15 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table INGREDIENT
--------------------------------------------------------

  CREATE TABLE "INGREDIENT" 
   (	"ID" NUMBER(*,0), 
	"NAME" VARCHAR2(128 BYTE), 
	"BRAND" VARCHAR2(60 BYTE), 
	"CATEGORY" VARCHAR2(40 BYTE), 
	"SERVING_SIZE" NUMBER(6,3), 
	"SERVING_UNIT" VARCHAR2(8 BYTE), 
	"ALT_SERVING_SIZE" NUMBER(6,3), 
	"ALT_SERVING_UNIT" VARCHAR2(8 BYTE), 
	"CALORIES" NUMBER(6,2), 
	"FAT" NUMBER(6,2), 
	"CARBS" NUMBER(6,2), 
	"PROTEIN" NUMBER(6,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table MEAL
--------------------------------------------------------

  CREATE TABLE "MEAL" 
   (	"ID" NUMBER(*,0), 
	"NAME" VARCHAR2(128 BYTE), 
	"DESCRIPTION" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" 
 LOB ("DESCRIPTION") STORE AS BASICFILE (
  TABLESPACE "JSPBETTERU_PERM_01" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
/
--------------------------------------------------------
--  DDL for Table MEAL_PART
--------------------------------------------------------

  CREATE TABLE "MEAL_PART" 
   (	"ID" NUMBER(*,0), 
	"MEALID" NUMBER(*,0), 
	"INGREDIENTID" NUMBER(*,0), 
	"AMOUNT" NUMBER(6,2), 
	"DEFAULT_UNIT" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table MULTIPLIER
--------------------------------------------------------

  CREATE TABLE "MULTIPLIER" 
   (	"NAME" VARCHAR2(30 BYTE), 
	"AMOUNT" NUMBER(4,3)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table TEMP_ACCOUNT
--------------------------------------------------------

  CREATE TABLE "TEMP_ACCOUNT" 
   (	"ID" NUMBER(*,0), 
	"USERNAME" VARCHAR2(60 BYTE), 
	"PASSWORD" CHAR(128 BYTE), 
	"CODE" CHAR(32 BYTE), 
	"CREATED" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table UNIT_SYSTEM
--------------------------------------------------------

  CREATE TABLE "UNIT_SYSTEM" 
   (	"NAME" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table WEEKDAY
--------------------------------------------------------

  CREATE TABLE "WEEKDAY" 
   (	"NAME" VARCHAR2(22 BYTE), 
	"DAY_OF_WEEK" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Table WEIGHT
--------------------------------------------------------

  CREATE TABLE "WEIGHT" 
   (	"WEIGHT_DATE" DATE, 
	"ACCOUNT_ID" NUMBER(*,0), 
	"WEIGHT" NUMBER(6,2), 
	"CALORIE_CHANGE" NUMBER, 
	"FAT_MULTIPLIER" NUMBER(3,2), 
	"CARB_MULTIPLIER" NUMBER(3,2), 
	"PROTEIN_MULTIPLIER" NUMBER(3,2) DEFAULT 1.00
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for View ACCOUNT_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "ACCOUNT_VIEW" ("ID", "USERNAME", "BIRTHDAY", "GENDER", "UNIT", "HEIGHT", "WEIGHT", "MULTIPLIER", "MULTIPLIER_AMOUNT", "WEEKDAY", "AGE", "WEIGHT_DATE", "ACTIVE_SINCE") AS 
  SELECT ACT.ID, USERNAME, BIRTHDAY, GENDER, UNIT, HEIGHT, WEIGHT, M.NAME MULTIPLIER, M.AMOUNT MULTIPLIER_AMOUNT, WEEKDAY, ACCOUNT_PKG.GETAGE(BIRTHDAY) AGE, WEIGHT_DATE, ACTIVE_SINCE
  FROM ACCOUNT ACT
  JOIN ACCOUNT_SETTING ACTS ON ACT.ID = ACTS.ACCOUNTID
  JOIN MULTIPLIER M ON M.NAME=MULTIPLIER
  LEFT OUTER JOIN WEIGHT ON ACT.ID = WEIGHT.ACCOUNT_ID
  ORDER BY ACT.ID, WEIGHT_DATE
WITH READ ONLY;
/
--------------------------------------------------------
--  DDL for View DAILY_INTAKE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "DAILY_INTAKE" ("ACCOUNT_ID", "INTAKE_DATE", "MEALS") AS 
  SELECT ACCOUNT_ID, INTAKE_DATE, LISTAGG(MEAL_ID,',') WITHIN GROUP (ORDER BY POSITION) MEALS
  FROM INTAKE
  GROUP BY ACCOUNT_ID, INTAKE_DATE
WITH READ ONLY;
/
--------------------------------------------------------
--  DDL for View HARRIS_BENEDICT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "HARRIS_BENEDICT" ("ID", "TDEE", "WEIGHT_DATE") AS 
  SELECT ID, ROUND(MULTIPLIER_AMOUNT*(EXTRA+WEIGHT+HEIGHT-AGE),2) TDEE, WEIGHT_DATE
  FROM (SELECT ID, WEIGHT*DECODE(GENDER,'MALE',6.23,4.35) WEIGHT, HEIGHT*DECODE(GENDER,'MALE',12.7,4.7) HEIGHT,
               AGE*DECODE(GENDER,'MALE',6.67,4.7) AGE, DECODE(GENDER,'MALE',66,655) EXTRA, MULTIPLIER_AMOUNT, WEIGHT_DATE
        FROM (SELECT ID, WEIGHT*DECODE(UNIT,'METRIC',2.2,1) WEIGHT, 
                     HEIGHT/DECODE(UNIT,'METRIC',2.54,1) HEIGHT, AGE, MULTIPLIER_AMOUNT, GENDER, WEIGHT_DATE
              FROM ACCOUNT_VIEW))
WITH READ ONLY;
/
--------------------------------------------------------
--  DDL for View MEAL_PART_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "MEAL_PART_VIEW" ("ID", "MEALID", "AMOUNT", "INGREDIENT_ID", "INGREDIENT", "BRAND", "CATEGORY", "SERVING_SIZE", "SERVING_UNIT", "TOTAL_CALORIES", "TOTAL_FAT", "TOTAL_CARBS", "TOTAL_PROTEIN") AS 
  SELECT ID, MEALID, AMOUNT, INGREDIENT_ID, INGREDIENT, BRAND, CATEGORY, SERVING_SIZE, SERVING_UNIT, (CALORIES*RATIO) TOTAL_CALORIES, (FAT*RATIO) TOTAL_FAT, (CARBS*RATIO) TOTAL_CARBS, (PROTEIN*RATIO) TOTAL_PROTEIN
  FROM (SELECT ROWNUM ID, MEALID, AMOUNT, DEFAULT_UNIT, I.ID INGREDIENT_ID, I.NAME INGREDIENT, BRAND, CATEGORY, CALORIES, FAT, CARBS, PROTEIN, AMOUNT / DECODE(DEFAULT_UNIT, 0, SERVING_SIZE, ALT_SERVING_SIZE) RATIO,
               DECODE(DEFAULT_UNIT, 0, SERVING_SIZE, ALT_SERVING_SIZE) SERVING_SIZE,
               DECODE(DEFAULT_UNIT, 0, SERVING_UNIT, ALT_SERVING_UNIT) SERVING_UNIT
        FROM MEAL_PART MP INNER JOIN INGREDIENT i ON MP.INGREDIENTID = I.ID)
  ORDER BY ID
WITH READ ONLY;
/
--------------------------------------------------------
--  DDL for View MEAL_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "MEAL_VIEW" ("ID", "NAME", "DESCRIPTION", "TOTAL_CALORIES", "TOTAL_FAT", "TOTAL_CARBS", "TOTAL_PROTEIN") AS 
  SELECT ID, NAME, DESCRIPTION, TOTAL_CALORIES, TOTAL_FAT, TOTAL_CARBS, TOTAL_PROTEIN
  FROM (SELECT MEALID, 
               ROUND(SUM(TOTAL_CALORIES),2) TOTAL_CALORIES, 
               ROUND(SUM(TOTAL_FAT),2) TOTAL_FAT, 
               ROUND(SUM(TOTAL_CARBS),2) TOTAL_CARBS, 
               ROUND(SUM(TOTAL_PROTEIN),2) TOTAL_PROTEIN
        FROM MEAL_PART_VIEW
        GROUP BY MEALID) MPV
  JOIN MEAL M
  ON M.ID = MPV.MEALID
WITH READ ONLY;
/
--------------------------------------------------------
--  DDL for View MIFFLIN_ST_JOER
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "MIFFLIN_ST_JOER" ("ID", "TDEE", "WEIGHT_DATE") AS 
  SELECT ID, ROUND(MULTIPLIER_AMOUNT*(WEIGHT+HEIGHT-AGE+EXTRA),2) TDEE, WEIGHT_DATE
  FROM (SELECT ID, 10*WEIGHT/DECODE(UNIT,'IMPERIAL',2.2,1) WEIGHT, 6.25*HEIGHT*DECODE(UNIT,'IMPERIAL',2.54,1) HEIGHT,
               AGE*5 AGE, DECODE(GENDER,'MALE',5,-161) EXTRA, MULTIPLIER_AMOUNT, WEIGHT_DATE
        FROM ACCOUNT_VIEW)
WITH READ ONLY;
/
REM INSERTING into ACCOUNT
SET DEFINE OFF;
Insert into ACCOUNT (ID,USERNAME,PASSWORD,BIRTHDAY,UNIT,GENDER,LAST_LOGIN,ACTIVE_SINCE) values (20,'testing23','b329be14745cda5fb29a7fa941b1ee520a2e7a43c8a766de355386cb4362145d866fce100332f18a216041e72e180245293fa1971f6058592426db6c811bea62',to_date('21-JAN-50','DD-MON-RR'),'IMPERIAL','FEMALE',to_date('21-FEB-14','DD-MON-RR'),to_date('21-FEB-14','DD-MON-RR'));
Insert into ACCOUNT (ID,USERNAME,PASSWORD,BIRTHDAY,UNIT,GENDER,LAST_LOGIN,ACTIVE_SINCE) values (21,'mdawg','b49c3161c2e7199e5fd1ce4cf0ee422f401e2c561c753c940c8d7d4e21861936abdb9c666177661fc38d31811adfabfafe5e5576d0f705a7c65cbe2cddcfc380',null,null,null,to_date('21-FEB-14','DD-MON-RR'),to_date('21-FEB-14','DD-MON-RR'));
Insert into ACCOUNT (ID,USERNAME,PASSWORD,BIRTHDAY,UNIT,GENDER,LAST_LOGIN,ACTIVE_SINCE) values (0,'test','1f6cceeff029f384b852176c161b94ad6446aa8e6c44b67472af990c0fe588458bcdb8f9b0be3e21bd0752724f64143e9d613406bc17475a2ed473595ff8ff5c',to_date('29-SEP-22','DD-MON-RR'),'IMPERIAL','FEMALE',to_date('27-FEB-14','DD-MON-RR'),to_date('14-FEB-14','DD-MON-RR'));
REM INSERTING into ACCOUNT_SETTING
SET DEFINE OFF;
Insert into ACCOUNT_SETTING (ID,ACCOUNTID,WEEKDAY,MULTIPLIER,HEIGHT,DATE_CHANGED,FORMULA) values (24,0,'TUESDAY','SEDENTARY',71,to_date('21-FEB-14','DD-MON-RR'),null);
Insert into ACCOUNT_SETTING (ID,ACCOUNTID,WEEKDAY,MULTIPLIER,HEIGHT,DATE_CHANGED,FORMULA) values (28,21,null,null,null,null,null);
Insert into ACCOUNT_SETTING (ID,ACCOUNTID,WEEKDAY,MULTIPLIER,HEIGHT,DATE_CHANGED,FORMULA) values (27,20,'WEDNESDAY','SEDENTARY',71,to_date('21-FEB-14','DD-MON-RR'),null);
REM INSERTING into BRAND
SET DEFINE OFF;
Insert into BRAND (NAME) values ('Chobani');
Insert into BRAND (NAME) values ('Fage');
Insert into BRAND (NAME) values ('Food City');
Insert into BRAND (NAME) values ('Healthy Harvest');
Insert into BRAND (NAME) values ('Isopure');
Insert into BRAND (NAME) values ('Mahatma');
Insert into BRAND (NAME) values ('Nature''s Own');
Insert into BRAND (NAME) values ('Quaker Oats');
Insert into BRAND (NAME) values ('Regal Spring');
REM INSERTING into CALORIE_SPLIT
SET DEFINE OFF;
REM INSERTING into CATEGORY
SET DEFINE OFF;
Insert into CATEGORY (NAME) values ('Carbs');
Insert into CATEGORY (NAME) values ('Dairy');
Insert into CATEGORY (NAME) values ('Other');
Insert into CATEGORY (NAME) values ('Proteins');
REM INSERTING into FOOD_UNIT
SET DEFINE OFF;
Insert into FOOD_UNIT (NAME,LONG_NAME) values ('g','gram');
Insert into FOOD_UNIT (NAME,LONG_NAME) values ('mL','millileter');
Insert into FOOD_UNIT (NAME,LONG_NAME) values ('oz','ounce');
Insert into FOOD_UNIT (NAME,LONG_NAME) values ('unit','unit');
Insert into FOOD_UNIT (NAME,LONG_NAME) values ('c','cup');
Insert into FOOD_UNIT (NAME,LONG_NAME) values ('tbsp','tablespoon');
Insert into FOOD_UNIT (NAME,LONG_NAME) values ('tsp','teaspoon');
Insert into FOOD_UNIT (NAME,LONG_NAME) values ('unknown','unknown');
Insert into FOOD_UNIT (NAME,LONG_NAME) values ('scoop','scoop');
REM INSERTING into FORMULA
SET DEFINE OFF;
Insert into FORMULA (NAME,UNIT_SYSTEM) values ('MIFFLIN-ST JOER','METRIC');
Insert into FORMULA (NAME,UNIT_SYSTEM) values ('HARRIS-BENEDICT','IMPERIAL');
Insert into FORMULA (NAME,UNIT_SYSTEM) values ('SIMPLE MULTIPLIER','IMPERIAL');
REM INSERTING into GENDER
SET DEFINE OFF;
Insert into GENDER (NAME) values ('FEMALE');
Insert into GENDER (NAME) values ('MALE');
REM INSERTING into INGREDIENT
SET DEFINE OFF;
Insert into INGREDIENT (ID,NAME,BRAND,CATEGORY,SERVING_SIZE,SERVING_UNIT,ALT_SERVING_SIZE,ALT_SERVING_UNIT,CALORIES,FAT,CARBS,PROTEIN) values (24,'0% Greek Yogurt','Chobani','Dairy',227,'g',1,'c',140,9,0,23);
Insert into INGREDIENT (ID,NAME,BRAND,CATEGORY,SERVING_SIZE,SERVING_UNIT,ALT_SERVING_SIZE,ALT_SERVING_UNIT,CALORIES,FAT,CARBS,PROTEIN) values (11,'Skim Milk','Food City','Dairy',8,'oz',1,'unit',90,0,13,8);
Insert into INGREDIENT (ID,NAME,BRAND,CATEGORY,SERVING_SIZE,SERVING_UNIT,ALT_SERVING_SIZE,ALT_SERVING_UNIT,CALORIES,FAT,CARBS,PROTEIN) values (13,'0% Greek Yogurt','Fage','Dairy',227,'g',1,'c',140,0,9,23);
Insert into INGREDIENT (ID,NAME,BRAND,CATEGORY,SERVING_SIZE,SERVING_UNIT,ALT_SERVING_SIZE,ALT_SERVING_UNIT,CALORIES,FAT,CARBS,PROTEIN) values (8,'Chicken Breast','Food City','Proteins',4,'oz',112,'g',140,4,0,25);
Insert into INGREDIENT (ID,NAME,BRAND,CATEGORY,SERVING_SIZE,SERVING_UNIT,ALT_SERVING_SIZE,ALT_SERVING_UNIT,CALORIES,FAT,CARBS,PROTEIN) values (9,'Brown Rice','Mahatma','Carbs',43,'g',0.5,'c',150,1,32,3);
Insert into INGREDIENT (ID,NAME,BRAND,CATEGORY,SERVING_SIZE,SERVING_UNIT,ALT_SERVING_SIZE,ALT_SERVING_UNIT,CALORIES,FAT,CARBS,PROTEIN) values (10,'Zero Carb Whey Isolate','Isopure','Carbs',1,'scoop',54,'g',210,1,0,50);
REM INSERTING into MEAL
SET DEFINE OFF;
Insert into MEAL (ID,NAME) values (0,'300g Chicken Breast');
Insert into MEAL (ID,NAME) values (1,'Isopure Protein shake');
REM INSERTING into MEAL_PART
SET DEFINE OFF;
Insert into MEAL_PART (ID,MEALID,INGREDIENTID,AMOUNT,DEFAULT_UNIT) values (1,0,8,300,'1');
Insert into MEAL_PART (ID,MEALID,INGREDIENTID,AMOUNT,DEFAULT_UNIT) values (2,1,10,1,'0');
Insert into MEAL_PART (ID,MEALID,INGREDIENTID,AMOUNT,DEFAULT_UNIT) values (3,1,11,8,'0');
Insert into MEAL_PART (ID,MEALID,INGREDIENTID,AMOUNT,DEFAULT_UNIT) values (4,1,13,227,'0');
REM INSERTING into MULTIPLIER
SET DEFINE OFF;
Insert into MULTIPLIER (NAME,AMOUNT) values ('SEDENTARY',1.2);
Insert into MULTIPLIER (NAME,AMOUNT) values ('LIGHTLY ACTIVE',1.375);
Insert into MULTIPLIER (NAME,AMOUNT) values ('MODERATELY ACTIVE',1.55);
Insert into MULTIPLIER (NAME,AMOUNT) values ('VERY ACTIVE',1.725);
Insert into MULTIPLIER (NAME,AMOUNT) values ('EXTREMELY ACTIVE',1.9);
REM INSERTING into TEMP_ACCOUNT
SET DEFINE OFF;
Insert into TEMP_ACCOUNT (ID,USERNAME,PASSWORD,CODE,CREATED) values (31,'mdawg','c18cbd10fb12fe4c83c10cce1ec7e8712f591f4067c91fb326d15281cd17adc8d34f3efd2bd56ad28482f4297addc34b788c7f832493221b8cf26757c40d64f4','395779e28ea747ac1000101110010010',to_date('21-FEB-14','DD-MON-RR'));
REM INSERTING into UNIT_SYSTEM
SET DEFINE OFF;
Insert into UNIT_SYSTEM (NAME) values ('IMPERIAL');
Insert into UNIT_SYSTEM (NAME) values ('METRIC');
REM INSERTING into WEEKDAY
SET DEFINE OFF;
Insert into WEEKDAY (NAME,DAY_OF_WEEK) values ('SUNDAY',0);
Insert into WEEKDAY (NAME,DAY_OF_WEEK) values ('MONDAY',1);
Insert into WEEKDAY (NAME,DAY_OF_WEEK) values ('TUESDAY',2);
Insert into WEEKDAY (NAME,DAY_OF_WEEK) values ('WEDNESDAY',3);
Insert into WEEKDAY (NAME,DAY_OF_WEEK) values ('THURSDAY',4);
Insert into WEEKDAY (NAME,DAY_OF_WEEK) values ('FRIDAY',5);
Insert into WEEKDAY (NAME,DAY_OF_WEEK) values ('SATURDAY',6);
REM INSERTING into WEIGHT
SET DEFINE OFF;
Insert into WEIGHT (WEIGHT_DATE,ACCOUNT_ID,WEIGHT,CALORIE_CHANGE,FAT_MULTIPLIER,CARB_MULTIPLIER,PROTEIN_MULTIPLIER) values (to_date('25-FEB-14','DD-MON-RR'),0,233.4,-700,0.2,0.8,1);
Insert into WEIGHT (WEIGHT_DATE,ACCOUNT_ID,WEIGHT,CALORIE_CHANGE,FAT_MULTIPLIER,CARB_MULTIPLIER,PROTEIN_MULTIPLIER) values (to_date('26-FEB-14','DD-MON-RR'),0,232,-700,0.2,0.8,1);
REM INSERTING into ACCOUNT_VIEW
SET DEFINE OFF;
Insert into ACCOUNT_VIEW (ID,USERNAME,BIRTHDAY,GENDER,UNIT,HEIGHT,WEIGHT,MULTIPLIER,MULTIPLIER_AMOUNT,WEEKDAY,AGE,WEIGHT_DATE,ACTIVE_SINCE) values (0,'test',to_date('29-SEP-22','DD-MON-RR'),'FEMALE','IMPERIAL',71,233.4,'SEDENTARY',1.2,'TUESDAY',1892,to_date('25-FEB-14','DD-MON-RR'),to_date('14-FEB-14','DD-MON-RR'));
Insert into ACCOUNT_VIEW (ID,USERNAME,BIRTHDAY,GENDER,UNIT,HEIGHT,WEIGHT,MULTIPLIER,MULTIPLIER_AMOUNT,WEEKDAY,AGE,WEIGHT_DATE,ACTIVE_SINCE) values (0,'test',to_date('29-SEP-22','DD-MON-RR'),'FEMALE','IMPERIAL',71,232,'SEDENTARY',1.2,'TUESDAY',1892,to_date('26-FEB-14','DD-MON-RR'),to_date('14-FEB-14','DD-MON-RR'));
Insert into ACCOUNT_VIEW (ID,USERNAME,BIRTHDAY,GENDER,UNIT,HEIGHT,WEIGHT,MULTIPLIER,MULTIPLIER_AMOUNT,WEEKDAY,AGE,WEIGHT_DATE,ACTIVE_SINCE) values (20,'testing23',to_date('21-JAN-50','DD-MON-RR'),'FEMALE','IMPERIAL',71,null,'SEDENTARY',1.2,'WEDNESDAY',64,null,to_date('21-FEB-14','DD-MON-RR'));
REM INSERTING into HARRIS_BENEDICT
SET DEFINE OFF;
Insert into HARRIS_BENEDICT (ID,TDEE,WEIGHT_DATE) values (0,-8266.09,to_date('25-FEB-14','DD-MON-RR'));
Insert into HARRIS_BENEDICT (ID,TDEE,WEIGHT_DATE) values (0,-8273.4,to_date('26-FEB-14','DD-MON-RR'));
Insert into HARRIS_BENEDICT (ID,TDEE,WEIGHT_DATE) values (20,null,null);
REM INSERTING into MEAL_PART_VIEW
SET DEFINE OFF;
Insert into MEAL_PART_VIEW (ID,MEALID,AMOUNT,INGREDIENT_ID,INGREDIENT,BRAND,CATEGORY,SERVING_SIZE,SERVING_UNIT,TOTAL_CALORIES,TOTAL_FAT,TOTAL_CARBS,TOTAL_PROTEIN) values (1,1,8,11,'Skim Milk','Food City','Dairy',8,'oz',90,0,13,8);
Insert into MEAL_PART_VIEW (ID,MEALID,AMOUNT,INGREDIENT_ID,INGREDIENT,BRAND,CATEGORY,SERVING_SIZE,SERVING_UNIT,TOTAL_CALORIES,TOTAL_FAT,TOTAL_CARBS,TOTAL_PROTEIN) values (2,1,227,13,'0% Greek Yogurt','Fage','Dairy',227,'g',140,0,9,23);
Insert into MEAL_PART_VIEW (ID,MEALID,AMOUNT,INGREDIENT_ID,INGREDIENT,BRAND,CATEGORY,SERVING_SIZE,SERVING_UNIT,TOTAL_CALORIES,TOTAL_FAT,TOTAL_CARBS,TOTAL_PROTEIN) values (3,0,300,8,'Chicken Breast','Food City','Proteins',112,'g',375,10.71428571428571428571428571428571428572,0,66.96428571428571428571428571428571428575);
Insert into MEAL_PART_VIEW (ID,MEALID,AMOUNT,INGREDIENT_ID,INGREDIENT,BRAND,CATEGORY,SERVING_SIZE,SERVING_UNIT,TOTAL_CALORIES,TOTAL_FAT,TOTAL_CARBS,TOTAL_PROTEIN) values (4,1,1,10,'Zero Carb Whey Isolate','Isopure','Carbs',1,'scoop',210,1,0,50);
REM INSERTING into MEAL_VIEW
SET DEFINE OFF;
Insert into MEAL_VIEW (ID,NAME,TOTAL_CALORIES,TOTAL_FAT,TOTAL_CARBS,TOTAL_PROTEIN) values (1,'Isopure Protein shake',440,1,22,81);
Insert into MEAL_VIEW (ID,NAME,TOTAL_CALORIES,TOTAL_FAT,TOTAL_CARBS,TOTAL_PROTEIN) values (0,'300g Chicken Breast',375,10.71,0,66.96);
REM INSERTING into MIFFLIN_ST_JOER
SET DEFINE OFF;
Insert into MIFFLIN_ST_JOER (ID,TDEE,WEIGHT_DATE) values (0,-8919.56,to_date('25-FEB-14','DD-MON-RR'));
Insert into MIFFLIN_ST_JOER (ID,TDEE,WEIGHT_DATE) values (0,-8927.2,to_date('26-FEB-14','DD-MON-RR'));
Insert into MIFFLIN_ST_JOER (ID,TDEE,WEIGHT_DATE) values (20,null,null);
--------------------------------------------------------
--  DDL for Index PK_ACCOUNT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_ACCOUNT_ID" ON "ACCOUNT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_ACCOUNT_SETTING_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_ACCOUNT_SETTING_ID" ON "ACCOUNT_SETTING" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_BRAND_NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_BRAND_NAME" ON "BRAND" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_CALORIE_SPLIT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_CALORIE_SPLIT_ID" ON "CALORIE_SPLIT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_CATEGORY_NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_CATEGORY_NAME" ON "CATEGORY" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_FOOD_UNIT
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_FOOD_UNIT" ON "FOOD_UNIT" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_FORMULA_NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_FORMULA_NAME" ON "FORMULA" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_GENDER
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_GENDER" ON "GENDER" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_INGREDIENT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_INGREDIENT_ID" ON "INGREDIENT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_MEAL_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_MEAL_ID" ON "MEAL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_MEAL_PART_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_MEAL_PART_ID" ON "MEAL_PART" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_MULTIPLIER
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_MULTIPLIER" ON "MULTIPLIER" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_TEMP_ACCOUNT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_TEMP_ACCOUNT_ID" ON "TEMP_ACCOUNT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_UNIT_SYSTEM
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_UNIT_SYSTEM" ON "UNIT_SYSTEM" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_WEEKDAY
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WEEKDAY" ON "WEEKDAY" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index PK_WEIGHT
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WEIGHT" ON "WEIGHT" ("WEIGHT_DATE", "ACCOUNT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index UC_NAME_BRAND
--------------------------------------------------------

  CREATE UNIQUE INDEX "UC_NAME_BRAND" ON "INGREDIENT" ("NAME", "BRAND") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index UNIQUE_ACCOUNT_USERNAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "UNIQUE_ACCOUNT_USERNAME" ON "ACCOUNT" ("USERNAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  DDL for Index UNIQUE_USERNAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "UNIQUE_USERNAME" ON "TEMP_ACCOUNT" ("USERNAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01" ;
/
--------------------------------------------------------
--  Constraints for Table ACCOUNT
--------------------------------------------------------

  ALTER TABLE "ACCOUNT" ADD CONSTRAINT "UNIQUE_ACCOUNT_USERNAME" UNIQUE ("USERNAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
  ALTER TABLE "ACCOUNT" ADD CONSTRAINT "PK_ACCOUNT_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
  ALTER TABLE "ACCOUNT" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "ACCOUNT" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "ACCOUNT" MODIFY ("ID" NOT NULL ENABLE);
/
--------------------------------------------------------
--  Constraints for Table ACCOUNT_SETTING
--------------------------------------------------------

  ALTER TABLE "ACCOUNT_SETTING" ADD CONSTRAINT "PK_ACCOUNT_SETTING_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
/
--------------------------------------------------------
--  Constraints for Table BRAND
--------------------------------------------------------

  ALTER TABLE "BRAND" ADD CONSTRAINT "PK_BRAND_NAME" PRIMARY KEY ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
  ALTER TABLE "BRAND" MODIFY ("NAME" NOT NULL ENABLE);
/
--------------------------------------------------------
--  Constraints for Table CALORIE_SPLIT
--------------------------------------------------------

  ALTER TABLE "CALORIE_SPLIT" ADD CONSTRAINT "PK_CALORIE_SPLIT_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
/
--------------------------------------------------------
--  Constraints for Table CATEGORY
--------------------------------------------------------

  ALTER TABLE "CATEGORY" ADD CONSTRAINT "PK_CATEGORY_NAME" PRIMARY KEY ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
/
--------------------------------------------------------
--  Constraints for Table FOOD_UNIT
--------------------------------------------------------

  ALTER TABLE "FOOD_UNIT" ADD CONSTRAINT "PK_FOOD_UNIT" PRIMARY KEY ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
/
--------------------------------------------------------
--  Constraints for Table FORMULA
--------------------------------------------------------

  ALTER TABLE "FORMULA" ADD CONSTRAINT "PK_FORMULA_NAME" PRIMARY KEY ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
/
--------------------------------------------------------
--  Constraints for Table GENDER
--------------------------------------------------------

  ALTER TABLE "GENDER" ADD CONSTRAINT "PK_GENDER" PRIMARY KEY ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
/
--------------------------------------------------------
--  Constraints for Table INGREDIENT
--------------------------------------------------------

  ALTER TABLE "INGREDIENT" ADD CONSTRAINT "UC_NAME_BRAND" UNIQUE ("NAME", "BRAND")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
  ALTER TABLE "INGREDIENT" ADD CONSTRAINT "PK_INGREDIENT_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
  ALTER TABLE "INGREDIENT" MODIFY ("SERVING_UNIT" NOT NULL ENABLE);
  ALTER TABLE "INGREDIENT" MODIFY ("SERVING_SIZE" NOT NULL ENABLE);
  ALTER TABLE "INGREDIENT" MODIFY ("CATEGORY" NOT NULL ENABLE);
  ALTER TABLE "INGREDIENT" MODIFY ("BRAND" NOT NULL ENABLE);
  ALTER TABLE "INGREDIENT" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "INGREDIENT" MODIFY ("ID" NOT NULL ENABLE);
/
--------------------------------------------------------
--  Constraints for Table MEAL
--------------------------------------------------------

  ALTER TABLE "MEAL" ADD CONSTRAINT "PK_MEAL_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
  ALTER TABLE "MEAL" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "MEAL" MODIFY ("ID" NOT NULL ENABLE);
/
--------------------------------------------------------
--  Constraints for Table MEAL_PART
--------------------------------------------------------

  ALTER TABLE "MEAL_PART" ADD CONSTRAINT "PK_MEAL_PART_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
  ALTER TABLE "MEAL_PART" ADD CONSTRAINT "CK_DEFAULT_UNIT_FLAG" CHECK (DEFAULT_UNIT BETWEEN 0 AND 1) ENABLE;
  ALTER TABLE "MEAL_PART" MODIFY ("ID" NOT NULL ENABLE);
/
--------------------------------------------------------
--  Constraints for Table MULTIPLIER
--------------------------------------------------------

  ALTER TABLE "MULTIPLIER" ADD CONSTRAINT "PK_MULTIPLIER" PRIMARY KEY ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
/
--------------------------------------------------------
--  Constraints for Table TEMP_ACCOUNT
--------------------------------------------------------

  ALTER TABLE "TEMP_ACCOUNT" ADD CONSTRAINT "UNIQUE_TEMPACCOUNT_USERNAME" UNIQUE ("USERNAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
  ALTER TABLE "TEMP_ACCOUNT" ADD CONSTRAINT "PK_TEMP_ACCOUNT_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
/
--------------------------------------------------------
--  Constraints for Table UNIT_SYSTEM
--------------------------------------------------------

  ALTER TABLE "UNIT_SYSTEM" ADD CONSTRAINT "PK_UNIT_SYSTEM" PRIMARY KEY ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
/
--------------------------------------------------------
--  Constraints for Table WEEKDAY
--------------------------------------------------------

  ALTER TABLE "WEEKDAY" ADD CONSTRAINT "PK_WEEKDAY" PRIMARY KEY ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
  ALTER TABLE "WEEKDAY" MODIFY ("DAY_OF_WEEK" NOT NULL ENABLE);
  ALTER TABLE "WEEKDAY" MODIFY ("NAME" NOT NULL ENABLE);
/
--------------------------------------------------------
--  Constraints for Table WEIGHT
--------------------------------------------------------

  ALTER TABLE "WEIGHT" ADD CONSTRAINT "PK_WEIGHT" PRIMARY KEY ("WEIGHT_DATE", "ACCOUNT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "JSPBETTERU_PERM_01"  ENABLE;
  ALTER TABLE "WEIGHT" ADD CONSTRAINT "CK_WEIGHT_FC_MULTS" CHECK (DECODE(PROTEIN_MULTIPLIER,1,FAT_MULTIPLIER+CARB_MULTIPLIER,FAT_MULTIPLIER+CARB_MULTIPLIER+PROTEIN_MULTIPLIER)=1) ENABLE;
/
--------------------------------------------------------
--  Ref Constraints for Table ACCOUNT
--------------------------------------------------------

  ALTER TABLE "ACCOUNT" ADD CONSTRAINT "FK_GENDER" FOREIGN KEY ("GENDER")
	  REFERENCES "GENDER" ("NAME") ENABLE;
  ALTER TABLE "ACCOUNT" ADD CONSTRAINT "FK_UNIT" FOREIGN KEY ("UNIT")
	  REFERENCES "UNIT_SYSTEM" ("NAME") ENABLE;
/
--------------------------------------------------------
--  Ref Constraints for Table ACCOUNT_SETTING
--------------------------------------------------------

  ALTER TABLE "ACCOUNT_SETTING" ADD CONSTRAINT "FK_ACTSET_ACCOUNTID" FOREIGN KEY ("ACCOUNTID")
	  REFERENCES "ACCOUNT" ("ID") ENABLE;
  ALTER TABLE "ACCOUNT_SETTING" ADD CONSTRAINT "FK_ACTSET_FORMULA" FOREIGN KEY ("FORMULA")
	  REFERENCES "FORMULA" ("NAME") ENABLE;
  ALTER TABLE "ACCOUNT_SETTING" ADD CONSTRAINT "FK_ACTSET_MULTIPLIER" FOREIGN KEY ("MULTIPLIER")
	  REFERENCES "MULTIPLIER" ("NAME") ENABLE;
  ALTER TABLE "ACCOUNT_SETTING" ADD CONSTRAINT "FK_ACTSET_WEEKDAY" FOREIGN KEY ("WEEKDAY")
	  REFERENCES "WEEKDAY" ("NAME") ENABLE;
/
--------------------------------------------------------
--  Ref Constraints for Table FORMULA
--------------------------------------------------------

  ALTER TABLE "FORMULA" ADD CONSTRAINT "FK_FORMULA_UNIT_SYSTEM" FOREIGN KEY ("UNIT_SYSTEM")
	  REFERENCES "UNIT_SYSTEM" ("NAME") ENABLE;
/
--------------------------------------------------------
--  Ref Constraints for Table INGREDIENT
--------------------------------------------------------

  ALTER TABLE "INGREDIENT" ADD CONSTRAINT "FK_ALT_SERVING_UNIT" FOREIGN KEY ("ALT_SERVING_UNIT")
	  REFERENCES "FOOD_UNIT" ("NAME") ENABLE;
  ALTER TABLE "INGREDIENT" ADD CONSTRAINT "FK_BRAND" FOREIGN KEY ("BRAND")
	  REFERENCES "BRAND" ("NAME") ENABLE;
  ALTER TABLE "INGREDIENT" ADD CONSTRAINT "FK_CATEGORY" FOREIGN KEY ("CATEGORY")
	  REFERENCES "CATEGORY" ("NAME") ENABLE;
  ALTER TABLE "INGREDIENT" ADD CONSTRAINT "FK_SERVING_UNIT" FOREIGN KEY ("SERVING_UNIT")
	  REFERENCES "FOOD_UNIT" ("NAME") ENABLE;
/
--------------------------------------------------------
--  Ref Constraints for Table MEAL_PART
--------------------------------------------------------

  ALTER TABLE "MEAL_PART" ADD CONSTRAINT "FK_MEAL_PART_INGREDIENTID" FOREIGN KEY ("INGREDIENTID")
	  REFERENCES "INGREDIENT" ("ID") ENABLE;
  ALTER TABLE "MEAL_PART" ADD CONSTRAINT "FK_MEAL_PART_MEALID" FOREIGN KEY ("MEALID")
	  REFERENCES "MEAL" ("ID") ENABLE;
/
--------------------------------------------------------
--  Ref Constraints for Table WEIGHT
--------------------------------------------------------

  ALTER TABLE "WEIGHT" ADD CONSTRAINT "FK_WEIGHT_ACTID" FOREIGN KEY ("ACCOUNT_ID")
	  REFERENCES "ACCOUNT" ("ID") ENABLE;
/
--------------------------------------------------------
--  DDL for Package ACCOUNT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "ACCOUNT_PKG" AS
  -- Gets the age for an account from the birthday
  FUNCTION GETAGE(PBIRTHDAY IN ACCOUNT.BIRTHDAY%TYPE) RETURN INTEGER;
  
  -- Creates a new account
  PROCEDURE NEW( PUSER IN ACCOUNT.USERNAME%TYPE
               , PPASS IN ACCOUNT.PASSWORD%TYPE
               , PID IN ACCOUNT.ID%TYPE DEFAULT SEQ_ACCOUNTID.NEXTVAL
               );
  
  -- Creates a new account from a temp account
  PROCEDURE CREATEFROMTEMP(PTEMPID IN TEMP_ACCOUNT.ID%TYPE);
  
  -- Retrieves a SYS_REFCURSOR for all the accounts
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Retrieves a SYS_REFCURSOR for an account by account id
  PROCEDURE GET( PID IN ACCOUNT.ID%TYPE
               , PCURSOR OUT SYS_REFCURSOR
               );
  
  -- Retrives a SYS_REFCURSOR for an account (ONLY)password by username
  PROCEDURE GET( PUSER IN ACCOUNT.USERNAME%TYPE
               , PCURSOR OUT SYS_REFCURSOR
               );
  
  -- Retrieves a SYS_REFCURSOR for an account and account_setting
  PROCEDURE GETFROMVIEW( PID IN ACCOUNT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Updates the last login to the time of login (SYSDATE) by account id
  PROCEDURE UPDATELASTLOGIN(PID IN ACCOUNT.ID%TYPE);
  
  -- Updates the account details for an account id
  PROCEDURE UPDATEACCOUNT( PID IN ACCOUNT.ID%TYPE
                         , PGENDER IN ACCOUNT.GENDER%TYPE
                         , PUNITSYSTEM IN ACCOUNT.UNIT%TYPE
                         , PBIRTHDAY IN ACCOUNT.BIRTHDAY%TYPE
                         );
  
END ACCOUNT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package ACCOUNT_SETTING_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "ACCOUNT_SETTING_PKG" AS
  -- Returns the last change date for an account's settings by account id
  FUNCTION LATEST(PACCTID IN ACCOUNT_SETTING.ACCOUNTID%TYPE) RETURN DATE;
  
  -- Creates a new account setting
  PROCEDURE NEW( PACCTID IN ACCOUNT_SETTING.ACCOUNTID%TYPE
               , PWEEKDAY IN ACCOUNT_SETTING.WEEKDAY%TYPE
               , PMULT IN ACCOUNT_SETTING.MULTIPLIER%TYPE
               , PHEIGHT IN ACCOUNT_SETTING.HEIGHT%TYPE
               );
  
  -- Gets all columns and all rows from the latest account settings
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Gets all columns from the latest account setting for account id
  PROCEDURE GET(PID IN ACCOUNT_SETTING.ACCOUNTID%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
END ACCOUNT_SETTING_PKG;

/

/
--------------------------------------------------------
--  DDL for Package BRAND_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "BRAND_PKG" AS
  -- Creates a new brand
  PROCEDURE NEW(PNAME IN BRAND.NAME%TYPE);
  
  -- Returns a SYS_REFCURSOR for all the brands
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
END BRAND_PKG;

/

/
--------------------------------------------------------
--  DDL for Package CALORIE_SPLIT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "CALORIE_SPLIT_PKG" AS
  -- Function for generating an abbreviation for a calorie split.
  -- It returns a string of '(+x, -y)'
  FUNCTION FORABBR(PDEC IN DECIMAL, PDEC2 IN DECIMAL) RETURN VARCHAR2 DETERMINISTIC;
  
  -- Returns a single calorie split by id
  PROCEDURE GET(PID IN CALORIE_SPLIT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns all the calorie splits
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Creates a new Calorie Split
  PROCEDURE NEW( PNAME IN CALORIE_SPLIT.NAME%TYPE
               , PWORKOUT IN CALORIE_SPLIT.WORKOUT_MULTIPLIER%TYPE
               , PREST IN CALORIE_SPLIT.REST_MULTIPLIER%TYPE
               , PID IN CALORIE_SPLIT.ID%TYPE DEFAULT SEQ_CALORIE_SPLITID.NEXTVAL
               );

END CALORIE_SPLIT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package CATEGORY_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "CATEGORY_PKG" AS
  -- Creates a new category
  PROCEDURE NEW(PNAME IN CATEGORY.NAME%TYPE);
  
  -- Returns a SYS_REFCURSOR for all categories
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
END CATEGORY_PKG;

/

/
--------------------------------------------------------
--  DDL for Package FOOD_UNIT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "FOOD_UNIT_PKG" AS
  -- Creates a new FOOD_UNIT
  PROCEDURE NEW(PNAME IN FOOD_UNIT.NAME%TYPE, PLONG IN FOOD_UNIT.LONG_NAME%TYPE);
  
  -- Returns a SYS_REFCURSOR for all FOOD_UNITs
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
END FOOD_UNIT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package FORMULA_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "FORMULA_PKG" AS
  -- Creates a new formula
  PROCEDURE NEW(PNAME IN FORMULA.NAME%TYPE, PUNIT IN FORMULA.UNIT_SYSTEM%TYPE DEFAULT 'IMPERIAL');
  
  -- Returns a single formula by name
  PROCEDURE GET(PNAME IN FORMULA.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns all formulas
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
END FORMULA_PKG;

/

/
--------------------------------------------------------
--  DDL for Package GENDER_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "GENDER_PKG" AS
  -- Creates a new Gender
  PROCEDURE NEW(PNAME IN GENDER.NAME%TYPE);
  
  -- Returns a SYS_REFCURSOR for all genders
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
END GENDER_PKG;

/

/
--------------------------------------------------------
--  DDL for Package INGREDIENT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "INGREDIENT_PKG" AS
  -- Creates a new ingredient
  PROCEDURE NEW( PNAME IN INGREDIENT.NAME%TYPE
               , PBRAND IN INGREDIENT.BRAND%TYPE
               , PCATG IN INGREDIENT.CATEGORY%TYPE
               , PSERV_SIZE IN INGREDIENT.SERVING_SIZE%TYPE
               , PSERV_UNIT IN INGREDIENT.SERVING_UNIT%TYPE
               , PALT_SERV_SIZE IN INGREDIENT.ALT_SERVING_SIZE%TYPE
               , PALT_SERV_UNIT IN INGREDIENT.ALT_SERVING_UNIT%TYPE
               , PCAL IN INGREDIENT.CALORIES%TYPE
               , PFAT IN INGREDIENT.FAT%TYPE
               , PCARB IN INGREDIENT.CARBS%TYPE
               , PPROT IN INGREDIENT.PROTEIN%TYPE
               , PID IN INGREDIENT.ID%TYPE DEFAULT SEQ_INGREDIENTID.NEXTVAL
               );
  
  -- Returns a SYS_REFCURSOR for all the ingredients from with foreign key
  -- 'prettified'. << Brings names
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns a SYS_REFCURSOR for an ingredient by ingredient id
  PROCEDURE GET(PID IN INGREDIENT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns a SYS_REFCURSOR for an ingredient by ingredient name
  PROCEDURE GET(PNAME IN INGREDIENT.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns a filtered SYS_REFCURSOR for all ingredients that 
  -- math the category and brand constraints.
  PROCEDURE FILTER( PCATEGORY IN VARCHAR2
                  , PBRAND IN VARCHAR2
                  , PCURSOR OUT SYS_REFCURSOR
                  );
  
END INGREDIENT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package INTAKE_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "INTAKE_PKG" AS
  -- Returns all the meals for an account on a specified date.
  PROCEDURE GET( PACTID IN INTEGER, PDATE IN DATE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns all meals for all days for an account
  PROCEDURE GET(ACTID IN INTAKE.ACCOUNT_ID%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Creates a new intake for an account
  PROCEDURE NEW( PACTID IN INTAKE.ACCOUNT_ID%TYPE
               , PMEALID IN INTAKE.MEAL_ID%TYPE
               , PPOSITION IN INTEGER
               , PDATE IN DATE DEFAULT SYSDATE
               , PID IN INTEGER DEFAULT SEQ_INTAKE_ID.NEXTVAL);
  
  PROCEDURE UPDATEINTAKE( PID IN INTEGER
                        , PACTID IN INTEGER
                        , PDATE IN DATE
                        , PMEALID IN INTEGER
                        , PPOSITION IN INTEGER);
END INTAKE_PKG;

/

/
--------------------------------------------------------
--  DDL for Package MEAL_PART_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "MEAL_PART_PKG" AS
  -- Creates a new Meal Part
  PROCEDURE NEW( PMEALID IN MEAL_PART.MEALID%TYPE
               , PINGID  IN MEAL_PART.INGREDIENTID%TYPE
               , PAMOUNT IN MEAL_PART.AMOUNT%TYPE
               , PDEFAULT_UNIT IN MEAL_PART.DEFAULT_UNIT%TYPE
               , PID IN MEAL_PART.ID%TYPE DEFAULT SEQ_MEAL_PART_ID.NEXTVAL
               );
               
  -- Returns all meal parts
  PROCEDURE GET( PCURSOR OUT SYS_REFCURSOR );
  
  -- Returns a SYS_REFCURSOR for all meal parts for a given meal id
  PROCEDURE GET( PID IN MEAL_PART.MEALID%TYPE, PCURSOR OUT SYS_REFCURSOR);
END MEAL_PART_PKG;

/

/
--------------------------------------------------------
--  DDL for Package MEAL_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "MEAL_PKG" AS
  -- Creates a new meal
  PROCEDURE NEW( PNAME IN MEAL.NAME%TYPE
               , PDESC IN MEAL.DESCRIPTION%TYPE
               , PID   IN MEAL.ID%TYPE DEFAULT SEQ_MEALID.NEXTVAL
               );
  
  -- Returns a SYS_REFCURSOR for all meals
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns a SYS_REFCURSOR for the meal by id
  PROCEDURE GET( PID IN MEAL.ID%TYPE
               , PCURSOR OUT SYS_REFCURSOR
               );
  
  
END MEAL_PKG;

/

/
--------------------------------------------------------
--  DDL for Package MULTIPLIER_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "MULTIPLIER_PKG" AS
  -- Creates a new multiplier
  PROCEDURE NEW(PNAME IN MULTIPLIER.NAME%TYPE, PAMT IN MULTIPLIER.AMOUNT%TYPE);
  
  -- Returns a SYS_REFCURSOR for all multipliers
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns a SYS_REFCURSOR for the multiplier amount for multiplier name
  PROCEDURE GET( PNAME IN MULTIPLIER.NAME%TYPE
               , PCURSOR OUT SYS_REFCURSOR
               );
  
END MULTIPLIER_PKG;

/

/
--------------------------------------------------------
--  DDL for Package TEMP_ACCOUNT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "TEMP_ACCOUNT_PKG" AS
  -- creates a new temp account
  PROCEDURE NEW( PUSER IN TEMP_ACCOUNT.USERNAME%TYPE
               , PPASS IN TEMP_ACCOUNT.PASSWORD%TYPE
               , PCODE IN TEMP_ACCOUNT.CODE%TYPE
               , PID   IN TEMP_ACCOUNT.ID%TYPE DEFAULT SEQ_TEMP_ACCOUNTID.NEXTVAL
               );
  
  -- creates a new account from a temp account's id
  PROCEDURE NEWACCOUNT( PID IN TEMP_ACCOUNT.ID%TYPE );
  
  -- Deletes a temp account by id
  PROCEDURE DEL(PID IN TEMP_ACCOUNT.ID%TYPE);
  
  -- Returns a sys_refcursor for all temp accounts
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns a sys_refcursor for a temp account by tempaccountid
  PROCEDURE GET(PID IN TEMP_ACCOUNT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns a sys_refcursor for a temp account by username/password
  PROCEDURE GETID(PUSER IN TEMP_ACCOUNT.USERNAME%TYPE
                 , PCURSOR OUT SYS_REFCURSOR
                 );
  
  
END TEMP_ACCOUNT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package UNIT_SYSTEM_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "UNIT_SYSTEM_PKG" AS
  -- Creates a new UNIT_SYSTEM
  PROCEDURE NEW(PNAME IN UNIT_SYSTEM.NAME%TYPE);
  
  -- Returns a SYS_REFCURSOR for all UNIT_SYSTEMs
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
END UNIT_SYSTEM_PKG;

/

/
--------------------------------------------------------
--  DDL for Package WEEKDAY_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "WEEKDAY_PKG" AS
  -- Creates a new WEEKDAY
  PROCEDURE NEW(PNAME IN WEEKDAY.NAME%TYPE);
  
  -- Returns a SYS_REFCURSOR for all WEEKDAYs
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns a SYS_REFCURSOR for a weekday by name
  PROCEDURE GET(Pname IN WEEKDAY.name%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  --Returns a SYS_REFCURSOR for a weekday by day of week number
  PROCEDURE GET(PDOW IN WEEKDAY.DAY_OF_WEEK%TYPE, PCURSOR OUT SYS_REFCURSOR);
END WEEKDAY_PKG;

/

/
--------------------------------------------------------
--  DDL for Package WEIGHT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "WEIGHT_PKG" AS
  -- Returns an person's weight for an account id and date given
  PROCEDURE GET(PID IN WEIGHT.ACCOUNT_ID%TYPE, PDATE IN WEIGHT.WEIGHT_DATE%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Returns all records for a person's weight for an account id;
  PROCEDURE GET(PID IN WEIGHT.ACCOUNT_ID%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Creates a new weight. The default weight_date is sysdate
  PROCEDURE NEW( PACTID IN WEIGHT.ACCOUNT_ID%TYPE
               , PWEIGHT IN WEIGHT.WEIGHT%TYPE
               , PCAL IN WEIGHT.CALORIE_CHANGE%TYPE
               , PFAT IN WEIGHT.FAT_MULTIPLIER%TYPE
               , PCARB IN WEIGHT.CARB_MULTIPLIER%TYPE
               , PPROT IN WEIGHT.PROTEIN_MULTIPLIER%TYPE DEFAULT 1
               , PDATE IN WEIGHT.WEIGHT_DATE%TYPE DEFAULT SYSDATE
               );
  
END WEIGHT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body ACCOUNT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "ACCOUNT_PKG" AS
  -- Gets the age for an account from the birthday
  FUNCTION GETAGE(PBIRTHDAY IN ACCOUNT.BIRTHDAY%TYPE) RETURN INTEGER
  IS
    IDATE DATE;
  BEGIN
    IF PBIRTHDAY IS NULL THEN
      IDATE := SYSDATE;
    ELSE
      IDATE := PBIRTHDAY;
    END IF;
    RETURN TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(IDATE,'YYYY');
  END GETAGE;
  
  PROCEDURE NEW(PUSER IN ACCOUNT.USERNAME%TYPE, PPASS IN ACCOUNT.PASSWORD%TYPE, PID IN ACCOUNT.ID%TYPE DEFAULT SEQ_ACCOUNTID.NEXTVAL) IS
  BEGIN
    INSERT INTO ACCOUNT(ID, USERNAME, PASSWORD, BIRTHDAY, UNIT, GENDER, LAST_LOGIN, ACTIVE_SINCE)
    VALUES(PID, PUSER, PPASS, NULL, NULL, NULL, SYSDATE, SYSDATE);
    COMMIT;
    
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END NEW;
  
  PROCEDURE CREATEFROMTEMP( PTEMPID IN TEMP_ACCOUNT.ID%TYPE )
  IS
    IUSERNAME TEMP_ACCOUNT.USERNAME%TYPE;
    IPASSWORD TEMP_ACCOUNT.PASSWORD%TYPE;
    IID INTEGER;
  BEGIN
    SELECT USERNAME, PASSWORD INTO IUSERNAME, IPASSWORD FROM TEMP_ACCOUNT WHERE ID=PTEMPID;
    NEW(IUSERNAME, IPASSWORD);
    TEMP_ACCOUNT_PKG.DEL(PTEMPID);
    SELECT ID INTO IID FROM ACCOUNT WHERE USERNAME=IUSERNAME AND PASSWORD=IPASSWORD;
    ACCOUNT_SETTING_PKG.NEW(IID, NULL, NULL, NULL);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END CREATEFROMTEMP;

  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM ACCOUNT
      ORDER BY ID;
  END GET;
  
  PROCEDURE GET(PID IN ACCOUNT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM ACCOUNT
      WHERE ID=PID;
  END GET;
  
  PROCEDURE GET(PUSER IN ACCOUNT.USERNAME%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID, PASSWORD
      FROM ACCOUNT
      WHERE USERNAME=PUSER;
  END GET;
  
  PROCEDURE GETFROMVIEW(PID IN ACCOUNT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM ACCOUNT_VIEW;
  END GETFROMVIEW;
  
  PROCEDURE UPDATELASTLOGIN(PID IN ACCOUNT.ID%TYPE) IS
  BEGIN
    UPDATE ACCOUNT
    SET LAST_LOGIN=SYSDATE
    WHERE ID=PID;
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
    END UPDATELASTLOGIN;
  
  PROCEDURE UPDATEACCOUNT( PID IN ACCOUNT.ID%TYPE
                         , PGENDER IN ACCOUNT.GENDER%TYPE
                         , PUNITSYSTEM IN ACCOUNT.UNIT%TYPE
                         , PBIRTHDAY IN ACCOUNT.BIRTHDAY%TYPE
                         ) IS
  BEGIN
    UPDATE ACCOUNT
    SET GENDER=UPPER(PGENDER),
        UNIT=UPPER(PUNITSYSTEM),
        BIRTHDAY=PBIRTHDAY
    WHERE ID=PID;
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END UPDATEACCOUNT;
END ACCOUNT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body ACCOUNT_SETTING_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "ACCOUNT_SETTING_PKG" AS
  FUNCTION LATEST(PACCTID IN ACCOUNT_SETTING.ACCOUNTID%TYPE) RETURN DATE
  IS
    ILATEST DATE;
  BEGIN
    SELECT MAX(DATE_CHANGED) INTO ILATEST
    FROM ACCOUNT_SETTING
    WHERE ACCOUNTID=PACCTID
    GROUP BY ACCOUNTID;
    RETURN ILATEST;
  END LATEST;
  
  
  PROCEDURE NEW( PACCTID IN ACCOUNT_SETTING.ACCOUNTID%TYPE
               , PWEEKDAY IN ACCOUNT_SETTING.WEEKDAY%TYPE
               , PMULT IN ACCOUNT_SETTING.MULTIPLIER%TYPE
               , PHEIGHT IN ACCOUNT_SETTING.HEIGHT%TYPE
               )
  IS
    ICHANGED DATE;
    IWEEKDAY WEEKDAY.NAME%TYPE;
    IMULTIPLIER MULTIPLIER.NAME%TYPE;
  BEGIN
    IWEEKDAY := UPPER(PWEEKDAY);
    IMULTIPLIER:= UPPER(PMULT);
    ICHANGED := LATEST(PACCTID);
    IF ROUND(ICHANGED, 'DDD') = ROUND(SYSDATE, 'DDD') OR ICHANGED=NULL THEN
      UPDATE ACCOUNT_SETTING
      SET WEEKDAY=IWEEKDAY,
          MULTIPLIER=IMULTIPLIER,
          HEIGHT=PHEIGHT
      WHERE ACCOUNTID=PACCTID AND DATE_CHANGED=ICHANGED;
    ELSE
      INSERT INTO ACCOUNT_SETTING(ID, ACCOUNTID, WEEKDAY, MULTIPLIER, HEIGHT, DATE_CHANGED)
      VALUES(SEQ_ACCOUNT_SETTINGID.NEXTVAL, PACCTID, IWEEKDAY, IMULTIPLIER, PHEIGHT, SYSDATE);
    END IF;
    COMMIT;
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        INSERT INTO ACCOUNT_SETTING(ID, ACCOUNTID)
        VALUES(SEQ_ACCOUNT_SETTINGID.NEXTVAL, PACCTID);
        COMMIT;
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PID IN ACCOUNT_SETTING.ACCOUNTID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM ACCOUNT_SETTING
      WHERE ACCOUNTID=PID AND DATE_CHANGED=LATEST(ACCOUNTID);
  END GET;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM ACCOUNT_SETTING
      WHERE DATE_CHANGED=LATEST(ACCOUNTID)
      GROUP BY ACCOUNTID;
  END GET;
  
END ACCOUNT_SETTING_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body BRAND_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "BRAND_PKG" AS
  PROCEDURE NEW(PNAME IN BRAND.NAME%TYPE)
  IS
  BEGIN
    INSERT INTO BRAND(NAME)
    VALUES(PNAME);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT NAME FROM BRAND;
  END GET;
  
END BRAND_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body CALORIE_SPLIT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "CALORIE_SPLIT_PKG" AS
  FUNCTION FORABBR(PDEC IN DECIMAL, PDEC2 IN DECIMAL) RETURN VARCHAR2 DETERMINISTIC
  IS
    IDEC INTEGER;
    IDEC2 INTEGER;
    ISTR VARCHAR(20);
  BEGIN
    IDEC := ROUND(100-100*PDEC)*-1;
    IDEC2 := ROUND(100-100*PDEC2)*-1;
    ISTR := '(';
    IF IDEC > 0 THEN
      ISTR := ISTR||'+'||TO_CHAR(IDEC);
    ELSE
      ISTR := ISTR||TO_CHAR(IDEC);
    END IF;
    ISTR := ISTR||', ';
    IF IDEC2 > 0 THEN
      ISTR := ISTR||'+'||TO_CHAR(IDEC2);
    ELSE
      ISTR := ISTR||TO_CHAR(IDEC2);
    END IF;
    RETURN ISTR||')';
  END FORABBR;

  PROCEDURE GET(PID IN CALORIE_SPLIT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM CALORIE_SPLIT
      WHERE ID=PID;
  END GET;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM CALORIE_SPLIT;
  END GET;
  
  PROCEDURE NEW( PNAME IN CALORIE_SPLIT.NAME%TYPE
               , PWORKOUT IN CALORIE_SPLIT.WORKOUT_MULTIPLIER%TYPE
               , PREST IN CALORIE_SPLIT.REST_MULTIPLIER%TYPE
               , PID IN CALORIE_SPLIT.ID%TYPE DEFAULT SEQ_CALORIE_SPLITID.NEXTVAL
               )
  IS
  BEGIN
    INSERT INTO CALORIE_SPLIT(ID,NAME,WORKOUT_MULTIPLIER,REST_MULTIPLIER)
    VALUES(PID,UPPER(PNAME),PWORKOUT,PREST);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
END CALORIE_SPLIT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body CATEGORY_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "CATEGORY_PKG" AS
  PROCEDURE NEW(PNAME IN CATEGORY.NAME%TYPE)
  IS
  BEGIN
    INSERT INTO CATEGORY(NAME)
    VALUES(PNAME);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT NAME
      FROM CATEGORY;
  END GET; 
  
END CATEGORY_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body FOOD_UNIT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "FOOD_UNIT_PKG" AS
  PROCEDURE NEW(PNAME IN FOOD_UNIT.NAME%TYPE, PLONG IN FOOD_UNIT.LONG_NAME%TYPE)
  IS
  BEGIN
    INSERT INTO FOOD_UNIT(NAME, LONG_NAME)
    VALUES(PNAME, PLONG);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM FOOD_UNIT;
  END GET; 
  
END FOOD_UNIT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body FORMULA_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "FORMULA_PKG" AS
  PROCEDURE NEW(PNAME IN FORMULA.NAME%TYPE, PUNIT IN FORMULA.UNIT_SYSTEM%TYPE DEFAULT 'IMPERIAL')
  IS
  BEGIN
    INSERT INTO FORMULA(NAME, UNIT_SYSTEM)
    VALUES(UPPER(PNAME), UPPER(PUNIT));
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PNAME IN FORMULA.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM FORMULA
      WHERE NAME=PNAME;
  END GET;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM FORMULA;
  END GET;
  
END FORMULA_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body GENDER_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "GENDER_PKG" AS
  PROCEDURE NEW(PNAME IN GENDER.NAME%TYPE)
  IS
  BEGIN
    INSERT INTO GENDER(NAME)
    VALUES(PNAME);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT NAME
      FROM GENDER;
  END GET; 
  
END GENDER_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body INGREDIENT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "INGREDIENT_PKG" AS
  PROCEDURE NEW( PNAME IN INGREDIENT.NAME%TYPE
                         , PBRAND IN INGREDIENT.BRAND%TYPE
                         , PCATG IN INGREDIENT.CATEGORY%TYPE
                         , PSERV_SIZE IN INGREDIENT.SERVING_SIZE%TYPE
                         , PSERV_UNIT IN INGREDIENT.SERVING_UNIT%TYPE
                         , PALT_SERV_SIZE IN INGREDIENT.ALT_SERVING_SIZE%TYPE
                         , PALT_SERV_UNIT IN INGREDIENT.ALT_SERVING_UNIT%TYPE
                         , PCAL IN INGREDIENT.CALORIES%TYPE
                         , PFAT IN INGREDIENT.FAT%TYPE
                         , PCARB IN INGREDIENT.CARBS%TYPE
                         , PPROT IN INGREDIENT.PROTEIN%TYPE
                         , PID IN INGREDIENT.ID%TYPE DEFAULT SEQ_INGREDIENTID.NEXTVAL
                         )
  IS
  BEGIN
    INSERT INTO INGREDIENT(ID, NAME, BRAND, CATEGORY, SERVING_UNIT, SERVING_SIZE, ALT_SERVING_UNIT, ALT_SERVING_SIZE, CALORIES, FAT, CARBS, PROTEIN)
    VALUES(PID, PNAME, PBRAND, PCATG, PSERV_UNIT, PSERV_SIZE, PALT_SERV_UNIT, PALT_SERV_SIZE, PCAL, PFAT, PCARB, PPROT);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM INGREDIENT
      ORDER BY ID;
  END GET;
  
  PROCEDURE GET(PID IN INGREDIENT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM INGREDIENT
      WHERE ID=PID;
  END GET;
  
  PROCEDURE GET(PNAME IN INGREDIENT.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM INGREDIENT
      WHERE NAME=PNAME;
  END GET;
  
  PROCEDURE FILTER( PCATEGORY IN VARCHAR2
                  , PBRAND IN VARCHAR2
                  , PCURSOR OUT SYS_REFCURSOR
                  )
  IS
  BEGIN
    IF UPPER(PCATEGORY) != 'ALL' AND UPPER(PBRAND) != 'ALL' THEN
      OPEN PCURSOR FOR
        SELECT * FROM INGREDIENT WHERE UPPER(CATEGORY)=UPPER(PCATEGORY) AND UPPER(BRAND)=UPPER(PBRAND);
    ELSIF UPPER(PCATEGORY) != 'ALL' THEN
      OPEN PCURSOR FOR
        SELECT * FROM INGREDIENT WHERE UPPER(CATEGORY)=UPPER(PCATEGORY);
    ELSIF UPPER(PBRAND) != 'ALL' THEN
      OPEN PCURSOR FOR
        SELECT * FROM INGREDIENT WHERE UPPER(BRAND)=UPPER(PBRAND);
    ELSE
      OPEN PCURSOR FOR
        SELECT * FROM INGREDIENT;
    END IF;
  END FILTER;
  
END INGREDIENT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body INTAKE_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "INTAKE_PKG" AS
  PROCEDURE GET( PACTID IN INTEGER, PDATE IN DATE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM INTAKE
      WHERE ACCOUNT_ID=PACTID AND ROUND(INTAKE_DATE,'DDD')=ROUND(PDATE,'DDD');
  END GET;
  
  -- Returns all meals for all days for an account
  PROCEDURE GET(ACTID IN INTAKE.ACCOUNT_ID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM INTAKE
      WHERE ACCOUNT_ID=ACTID;
  END GET;
  
  -- Creates a new intake for an account
  PROCEDURE NEW( PACTID IN INTAKE.ACCOUNT_ID%TYPE
               , PMEALID IN INTAKE.MEAL_ID%TYPE
               , PPOSITION IN INTEGER
               , PDATE IN DATE DEFAULT SYSDATE
               , PID IN INTEGER DEFAULT SEQ_INTAKE_ID.NEXTVAL)
  IS
  BEGIN
    INSERT INTO INTAKE(ID, INTAKE_DATE, ACCOUNT_ID, MEAL_ID, POSITION)
    VALUES(PID, ROUND(PDATE,'DDD'), PACTID, PMEALID, PPOSITION);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE UPDATEINTAKE( PID IN INTEGER
                        , PACTID IN INTEGER
                        , PDATE IN DATE
                        , PMEALID IN INTEGER
                        , PPOSITION IN INTEGER)
  IS
  BEGIN
    UPDATE INTAKE
    SET MEAL_ID=PMEALID, POSITION=PPOSITION
    WHERE ID=PID;
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END UPDATEINTAKE;
END INTAKE_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body MEAL_PART_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "MEAL_PART_PKG" AS
  PROCEDURE NEW( PMEALID IN MEAL_PART.MEALID%TYPE
               , PINGID  IN MEAL_PART.INGREDIENTID%TYPE
               , PAMOUNT IN MEAL_PART.AMOUNT%TYPE
               , PDEFAULT_UNIT IN MEAL_PART.DEFAULT_UNIT%TYPE
               , PID IN MEAL_PART.ID%TYPE DEFAULT SEQ_MEAL_PART_ID.NEXTVAL
               )
  IS
  BEGIN
    INSERT INTO MEAL_PART(ID, MEALID, INGREDIENTID, AMOUNT, DEFAULT_UNIT)
    VALUES(PID, PMEALID, PINGID, PAMOUNT, PDEFAULT_UNIT);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET( PCURSOR OUT SYS_REFCURSOR )
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM MEAL_PART_VIEW
      ORDER BY ID;
  END GET;
  
  PROCEDURE GET( PID IN MEAL_PART.MEALID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM MEAL_PART_VIEW
      WHERE MEALID=PID;
  END GET;
  
END MEAL_PART_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body MEAL_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "MEAL_PKG" AS
  PROCEDURE NEW( PNAME IN MEAL.NAME%TYPE
               , PDESC IN MEAL.DESCRIPTION%TYPE
               , PID   IN MEAL.ID%TYPE DEFAULT SEQ_MEALID.NEXTVAL
               )
  IS
  BEGIN
    INSERT INTO MEAL(ID, NAME, DESCRIPTION)
    VALUES(PID, PNAME, PDESC);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET( PID IN MEAL.ID%TYPE
               , PCURSOR OUT SYS_REFCURSOR
               )
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM MEAL_VIEW
      WHERE ID=PID;
  END GET;
  
  PROCEDURE GET( PCURSOR OUT SYS_REFCURSOR )
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM MEAL_VIEW
      ORDER BY ID;
  END GET;
  
END MEAL_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body MULTIPLIER_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "MULTIPLIER_PKG" AS
  PROCEDURE NEW(PNAME IN MULTIPLIER.NAME%TYPE, PAMT IN MULTIPLIER.AMOUNT%TYPE)
  IS
  BEGIN
    INSERT INTO MULTIPLIER(NAME, AMOUNT)
    VALUES(PNAME, PAMT);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM MULTIPLIER;
  END GET; 
  
  PROCEDURE GET(PNAME IN MULTIPLIER.NAME%TYPE
               , PCURSOR OUT SYS_REFCURSOR
               )
  IS
  BEGIN
    OPEN  PCURSOR FOR
      SELECT NAME, AMOUNT
      FROM MULTIPLIER 
      WHERE UPPER(NAME)=UPPER(PNAME);
  END GET;
  
END MULTIPLIER_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body TEMP_ACCOUNT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "TEMP_ACCOUNT_PKG" AS
  PROCEDURE NEW( PUSER IN TEMP_ACCOUNT.USERNAME%TYPE
               , PPASS IN TEMP_ACCOUNT.PASSWORD%TYPE
               , PCODE IN TEMP_ACCOUNT.CODE%TYPE
               , PID   IN TEMP_ACCOUNT.ID%TYPE DEFAULT SEQ_TEMP_ACCOUNTID.NEXTVAL
               )
  IS
    IUSER TEMP_ACCOUNT.USERNAME%TYPE;
  BEGIN
    INSERT INTO TEMP_ACCOUNT(ID, USERNAME, PASSWORD, CODE, CREATED)
    SELECT PID, PUSER, PPASS, PCODE, SYSDATE FROM DUAL
    WHERE NOT EXISTS(SELECT NULL FROM TEMP_ACCOUNT TA, ACCOUNT A WHERE TA.USERNAME=PUSER OR A.USERNAME=PUSER);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE NEWACCOUNT(PID IN TEMP_ACCOUNT.ID%TYPE)
  IS
  BEGIN
    ACCOUNT_PKG.CREATEFROMTEMP(PID);
  END NEWACCOUNT;
  
  PROCEDURE DEL(PID IN TEMP_ACCOUNT.ID%TYPE)
  IS
  BEGIN
    DELETE FROM TEMP_ACCOUNT
    WHERE ID=PID;
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
  END DEL;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM TEMP_ACCOUNT;
  END GET;
  
  PROCEDURE GET(PID IN TEMP_ACCOUNT.ID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID, USERNAME, PASSWORD, CODE
      FROM TEMP_ACCOUNT
      WHERE ID=PID;
  END GET;
  
  PROCEDURE GETID( PUSER IN TEMP_ACCOUNT.USERNAME%TYPE
                 , PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID
      FROM TEMP_ACCOUNT
      WHERE USERNAME=PUSER;
  END GETID;
  
END TEMP_ACCOUNT_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body UNIT_SYSTEM_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "UNIT_SYSTEM_PKG" AS
  PROCEDURE NEW(PNAME IN UNIT_SYSTEM.NAME%TYPE)
  IS
  BEGIN
    INSERT INTO UNIT_SYSTEM(NAME)
    VALUES(PNAME);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT NAME
      FROM UNIT_SYSTEM;
  END GET; 
  
END UNIT_SYSTEM_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body WEEKDAY_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "WEEKDAY_PKG" AS
  PROCEDURE NEW(PNAME IN WEEKDAY.NAME%TYPE)
  IS
    INUM INTEGER;
  BEGIN
    SELECT COUNT(NAME) INTO INUM FROM WEEKDAY;
    INSERT INTO WEEKDAY(NAME, DAY_OF_WEEK)
    VALUES(PNAME, INUM);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM WEEKDAY;
  END GET;
  
  PROCEDURE GET(PNAME IN WEEKDAY.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM WEEKDAY
      WHERE NAME=PNAME;
  END GET;
  
  PROCEDURE GET(PDOW IN WEEKDAY.DAY_OF_WEEK%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM WEEKDAY
      WHERE DAY_OF_WEEK=PDOW;
  END GET;
  
END WEEKDAY_PKG;

/

/
--------------------------------------------------------
--  DDL for Package Body WEIGHT_PKG
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "WEIGHT_PKG" AS
  -- Returns an person's weight for an account id and date given
  PROCEDURE GET(PID IN WEIGHT.ACCOUNT_ID%TYPE, PDATE IN WEIGHT.WEIGHT_DATE%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM WEIGHT
      WHERE ACCOUNT_ID=PID AND ROUND(WEIGHT_DATE,'DDD')=ROUND(PDATE,'DDD')
      ORDER BY WEIGHT_DATE;
  END GET;
  
  -- Returns all records for a person's weight for an account id;
  PROCEDURE GET(PID IN WEIGHT.ACCOUNT_ID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM WEIGHT
      WHERE ACCOUNT_ID=PID
      ORDER BY WEIGHT_DATE;
  END GET;
  
  -- Creates a new weight. The default weight_date is sysdate
  PROCEDURE NEW( PACTID IN WEIGHT.ACCOUNT_ID%TYPE
               , PWEIGHT IN WEIGHT.WEIGHT%TYPE
               , PCAL IN WEIGHT.CALORIE_CHANGE%TYPE
               , PFAT IN WEIGHT.FAT_MULTIPLIER%TYPE
               , PCARB IN WEIGHT.CARB_MULTIPLIER%TYPE
               , PPROT IN WEIGHT.PROTEIN_MULTIPLIER%TYPE DEFAULT 1
               , PDATE IN WEIGHT.WEIGHT_DATE%TYPE DEFAULT SYSDATE
               )
  IS
  BEGIN
    INSERT INTO WEIGHT(WEIGHT_DATE,ACCOUNT_ID,WEIGHT,CALORIE_CHANGE,FAT_MULTIPLIER,CARB_MULTIPLIER,PROTEIN_MULTIPLIER)
    VALUES(PDATE,PACTID,PWEIGHT,PCAL,PFAT,PCARB,PPROT);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
END WEIGHT_PKG;

/

/
